<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STP</title>
      <link href="/2023/01/08/stp/"/>
      <url>/2023/01/08/stp/</url>
      
        <content type="html"><![CDATA[<h1 id="STP-生成树"><a href="#STP-生成树" class="headerlink" title="STP  生成树"></a>STP  生成树</h1><h2 id="一、解决冗余环境的三大问题"><a href="#一、解决冗余环境的三大问题" class="headerlink" title="一、解决冗余环境的三大问题"></a>一、解决冗余环境的三大问题</h2><h4 id="1、广播风暴"><a href="#1、广播风暴" class="headerlink" title="1、广播风暴"></a>1、广播风暴</h4><h4 id="2、数据帧多个副本"><a href="#2、数据帧多个副本" class="headerlink" title="2、数据帧多个副本"></a>2、数据帧多个副本</h4><h4 id="3、MAC地址的不稳定性"><a href="#3、MAC地址的不稳定性" class="headerlink" title="3、MAC地址的不稳定性"></a>3、MAC地址的不稳定性</h4><h2 id="二、标准"><a href="#二、标准" class="headerlink" title="二、标准"></a>二、标准</h2><h4 id="1、原始STP：802-1D"><a href="#1、原始STP：802-1D" class="headerlink" title="1、原始STP：802.1D"></a>1、原始STP：802.1D</h4><h4 id="2、CST"><a href="#2、CST" class="headerlink" title="2、CST"></a>2、CST</h4><h4 id="3、PVST和PVST"><a href="#3、PVST和PVST" class="headerlink" title="3、PVST和PVST+"></a>3、PVST和PVST+</h4><h4 id="4、RSTP"><a href="#4、RSTP" class="headerlink" title="4、RSTP"></a>4、RSTP</h4><h4 id="5、MSTP"><a href="#5、MSTP" class="headerlink" title="5、MSTP"></a>5、MSTP</h4><h2 id="三、选举过程"><a href="#三、选举过程" class="headerlink" title="三、选举过程"></a>三、选举过程</h2><h4 id="①根桥："><a href="#①根桥：" class="headerlink" title="①根桥："></a>①根桥：</h4><p>比较网桥ID（优先级和背板MAC地址），小的优</p><h4 id="②根端口："><a href="#②根端口：" class="headerlink" title="②根端口："></a>②根端口：</h4><p>在非根桥交换机上选举，有且只有一个；接受BPDU，开销、网桥ID、端口ID（端口优先级+序列号）</p><h4 id="③指定端口："><a href="#③指定端口：" class="headerlink" title="③指定端口："></a>③指定端口：</h4><p>在每一条链路上，发送或转发BPDU，根桥上每一个端口都是指定端口；开销、网桥ID、端口ID</p><h4 id="④阻塞端口："><a href="#④阻塞端口：" class="headerlink" title="④阻塞端口："></a>④阻塞端口：</h4><p>逻辑和是哪个阻塞，只接受BPDU</p><h2 id="四、端口角色"><a href="#四、端口角色" class="headerlink" title="四、端口角色"></a>四、端口角色</h2><h4 id="①disable：shutdown"><a href="#①disable：shutdown" class="headerlink" title="①disable：shutdown"></a>①disable：shutdown</h4><h4 id="②阻塞端口：只接受BPDU"><a href="#②阻塞端口：只接受BPDU" class="headerlink" title="②阻塞端口：只接受BPDU"></a>②阻塞端口：只接受BPDU</h4><h4 id="③根端口：接受BPDU"><a href="#③根端口：接受BPDU" class="headerlink" title="③根端口：接受BPDU"></a>③根端口：接受BPDU</h4><h4 id="④指定端口：发送或转发BPDU"><a href="#④指定端口：发送或转发BPDU" class="headerlink" title="④指定端口：发送或转发BPDU"></a>④指定端口：发送或转发BPDU</h4><h2 id="五、端口状态"><a href="#五、端口状态" class="headerlink" title="五、端口状态"></a>五、端口状态</h2><h4 id="①down-shutdown"><a href="#①down-shutdown" class="headerlink" title="①down:shutdown"></a>①down:shutdown</h4><h4 id="②blocking-阻塞状态"><a href="#②blocking-阻塞状态" class="headerlink" title="②blocking:阻塞状态"></a>②blocking:阻塞状态</h4><p>如果在20S内没有接收到对端的BPDU</p><h4 id="③listening：（侦听状态）进行端口的状态转变"><a href="#③listening：（侦听状态）进行端口的状态转变" class="headerlink" title="③listening：（侦听状态）进行端口的状态转变"></a>③listening：（侦听状态）进行端口的状态转变</h4><p>经历15S</p><h4 id="④learning：学习状态，学习MAC地址"><a href="#④learning：学习状态，学习MAC地址" class="headerlink" title="④learning：学习状态，学习MAC地址"></a>④learning：学习状态，学习MAC地址</h4><p>经历15S</p><h4 id="⑤forwarding：可以正常转发数据帧"><a href="#⑤forwarding：可以正常转发数据帧" class="headerlink" title="⑤forwarding：可以正常转发数据帧"></a>⑤forwarding：可以正常转发数据帧</h4><p>如果是本地链路出现故障，阻塞→转发30S<br>如果是非本地链路出现故障，阻塞→转发50S</p><h2 id="六、BPDU的类型"><a href="#六、BPDU的类型" class="headerlink" title="六、BPDU的类型"></a>六、BPDU的类型</h2><p>BPDU：桥协议数据单元，用来协商STP的过程，发送周期2S，存活周期20S</p><h4 id="①配置BPDU：存放网桥的相关信息（网桥ID，发送周期，老化时间等）"><a href="#①配置BPDU：存放网桥的相关信息（网桥ID，发送周期，老化时间等）" class="headerlink" title="①配置BPDU：存放网桥的相关信息（网桥ID，发送周期，老化时间等）"></a>①配置BPDU：存放网桥的相关信息（网桥ID，发送周期，老化时间等）</h4><h4 id="②TCN-BPDU：拓扑变化BPDU，用来表示拓扑发生了变化"><a href="#②TCN-BPDU：拓扑变化BPDU，用来表示拓扑发生了变化" class="headerlink" title="②TCN BPDU：拓扑变化BPDU，用来表示拓扑发生了变化"></a>②TCN BPDU：拓扑变化BPDU，用来表示拓扑发生了变化</h4><h2 id="七、拓扑变化的过程"><a href="#七、拓扑变化的过程" class="headerlink" title="七、拓扑变化的过程"></a>七、拓扑变化的过程</h2><p>当拓扑发生变化，该交换机会往根桥方向发送一个TCN BPDU，根桥收到TCN BPDU，会回应TC BPDU，此时拓扑中的交换机收到TC的信息会将MAC地址的老化时间由300S降为15S，重新地址学习</p><pre class=" language-YAML"><code class="language-YAML">Switch#show spanning-tree bridgeSwitch#debug spanning-tree synchronization</code></pre><h2 id="八、STP的操作"><a href="#八、STP的操作" class="headerlink" title="八、STP的操作"></a>八、STP的操作</h2><h4 id="（1）更改优先级"><a href="#（1）更改优先级" class="headerlink" title="（1）更改优先级"></a>（1）更改优先级</h4><p>优先级默认是32768,（查看的优先级数字是由优先级+VLAN ID）</p><h6 id="①更改优先级"><a href="#①更改优先级" class="headerlink" title="①更改优先级"></a>①更改优先级</h6><pre class=" language-YAML"><code class="language-YAML">SW2(config)#spanning-tree vlan 1 priority 2000% Bridge Priority must be in increments of 4096.% Allowed values are:   0     4096  8192  12288 16384 20480 24576 28672  32768 36864 40960 45056 49152 53248 57344 61440注意：必须是4096的倍数</code></pre><h6 id="②直接指定根桥"><a href="#②直接指定根桥" class="headerlink" title="②直接指定根桥"></a>②直接指定根桥</h6><pre class=" language-YAML"><code class="language-YAML">SW2(config)#spanning-tree vlan 1 root ?  primary    Configure this switch as primary root for this spanning tree//指定为主根  secondary  Configure switch as secondary root//指定为备根</code></pre><h4 id="（2）相关小特性"><a href="#（2）相关小特性" class="headerlink" title="（2）相关小特性"></a>（2）相关小特性</h4><h6 id="①portfast：对于接入交换机的接入端口，跳过30S的等待时间"><a href="#①portfast：对于接入交换机的接入端口，跳过30S的等待时间" class="headerlink" title="①portfast：对于接入交换机的接入端口，跳过30S的等待时间"></a>①portfast：对于接入交换机的接入端口，跳过30S的等待时间</h6><pre class=" language-YAML"><code class="language-YAML">SW3(config)#spanning-tree portfast edge default //全局配置SW3(config)#int e0/2                            SW3(config-if)#spanning-tree portfast *Jul  4 07:47:33.766: STP: VLAN0001 Et0/2 ->jump to forwarding from blocking</code></pre><p>②uplinkfast：实现本地设备的链路出现故障，可以将原先的阻塞端口快速变为转发状态</p><pre class=" language-YAML"><code class="language-YAML">SW3(config)#spanning-tree uplinkfast→会将接口的开销增加3000，以及优先级变为49152*Jul  4 07:54:27.538: STP: VLAN0001 heard root  4097-aabb.cc00.1000 on Et0/1*Jul  4 07:54:27.538:     supersedes 49153-aabb.cc00.3000*Jul  4 07:54:27.538: STP: VLAN0001 new root is 4097, aabb.cc00.1000 on port Et0/1, cost 3100</code></pre><p>③backbonefast：在所有交换机上使用，可以缩短20S的时间</p><pre class=" language-YAML"><code class="language-YAML">SW1(config)#spanning-tree backbonefast </code></pre><h2 id="九、RSTP–802-1W"><a href="#九、RSTP–802-1W" class="headerlink" title="九、RSTP–802.1W"></a>九、RSTP–802.1W</h2><p>特点：能够快速收敛，向下兼容</p><h2 id="十、端口角色"><a href="#十、端口角色" class="headerlink" title="十、端口角色"></a>十、端口角色</h2><h4 id="①RP"><a href="#①RP" class="headerlink" title="①RP"></a>①RP</h4><h4 id="②DP"><a href="#②DP" class="headerlink" title="②DP"></a>②DP</h4><h4 id="③AP：替代端口（备用端口），为RP备用"><a href="#③AP：替代端口（备用端口），为RP备用" class="headerlink" title="③AP：替代端口（备用端口），为RP备用"></a>③AP：替代端口（备用端口），为RP备用</h4><h4 id="④BP：备份端口，为DP备份，但是只有在hub的情况下"><a href="#④BP：备份端口，为DP备份，但是只有在hub的情况下" class="headerlink" title="④BP：备份端口，为DP备份，但是只有在hub的情况下"></a>④BP：备份端口，为DP备份，但是只有在hub的情况下</h4><h2 id="十一、端口状态"><a href="#十一、端口状态" class="headerlink" title="十一、端口状态"></a>十一、端口状态</h2><h4 id="①discarding：丢弃状态"><a href="#①discarding：丢弃状态" class="headerlink" title="①discarding：丢弃状态"></a>①discarding：丢弃状态</h4><h4 id="②learning：学习状态"><a href="#②learning：学习状态" class="headerlink" title="②learning：学习状态"></a>②learning：学习状态</h4><h4 id="③forwarding：转发状态"><a href="#③forwarding：转发状态" class="headerlink" title="③forwarding：转发状态"></a>③forwarding：转发状态</h4><h2 id="十二、BPDU更改"><a href="#十二、BPDU更改" class="headerlink" title="十二、BPDU更改"></a>十二、BPDU更改</h2><p>保留原先的第一和第八比特，对中间的比特做了更改</p><h2 id="十三、时间上"><a href="#十三、时间上" class="headerlink" title="十三、时间上"></a>十三、时间上</h2><p>BPDU的发送周期还是2S，但是老化时间变为3倍的更新周期（6S）</p><h2 id="十四、端口上"><a href="#十四、端口上" class="headerlink" title="十四、端口上"></a>十四、端口上</h2><p>分为边缘和非边缘端口，边缘端口不会影响RSTP的稳定性，手工启动快速端口</p><h2 id="十五、链路类型"><a href="#十五、链路类型" class="headerlink" title="十五、链路类型"></a>十五、链路类型</h2><h4 id="①交换机与终端连接的端口（边缘端口）"><a href="#①交换机与终端连接的端口（边缘端口）" class="headerlink" title="①交换机与终端连接的端口（边缘端口）"></a>①交换机与终端连接的端口（边缘端口）</h4><p>→需要通过快速端口来快速过渡到转发状态</p><h4 id="②交换机与交换机相连的端口（P2P）"><a href="#②交换机与交换机相连的端口（P2P）" class="headerlink" title="②交换机与交换机相连的端口（P2P）"></a>②交换机与交换机相连的端口（P2P）</h4><p>→通过P/A机制来实现快速过渡到转发状态</p><h4 id="③交换机与hub连接的链路（共享）"><a href="#③交换机与hub连接的链路（共享）" class="headerlink" title="③交换机与hub连接的链路（共享）"></a>③交换机与hub连接的链路（共享）</h4><p>→无法通过P/A机制来实现快速过渡到转发状态</p><h2 id="十六、P-x2F-A机制-提议-x2F-同意"><a href="#十六、P-x2F-A机制-提议-x2F-同意" class="headerlink" title="十六、P/A机制(提议/同意)"></a>十六、P/A机制(提议/同意)</h2><h4 id="（1）提议-x2F-同意"><a href="#（1）提议-x2F-同意" class="headerlink" title="（1）提议/同意:"></a>（1）提议/同意:</h4><p>只能在P2P链路上使用，交换机A发送P比特置1的BPDU给交换机B，希望自己能快速过渡到转发状态，交换机B收到P比特置1的BPDU，会进入同步状态，交换机B会回应A比特置1的BPDU，交换机A收到A比特置1的BPDU，会过渡到转发状态，该过程与STP计时器无关</p><h4 id="（2）同步状态："><a href="#（2）同步状态：" class="headerlink" title="（2）同步状态："></a>（2）同步状态：</h4><p>将非边缘阻塞，避免环路</p><h2 id="十七、拓扑变化"><a href="#十七、拓扑变化" class="headerlink" title="十七、拓扑变化"></a>十七、拓扑变化</h2><p>拓扑发生变化，交换机会直接发送TC位置1的BPDU，然后立即清空本地MAC地址表中的故障链路，其他交换机收到TC位置1的BPDU，也执行MAC地址重学习的过程（不需要发送TCN的BPDU）</p><h2 id="十八、配置"><a href="#十八、配置" class="headerlink" title="十八、配置"></a>十八、配置</h2><pre class=" language-YAML"><code class="language-YAML">Switch(config)#spanning-tree mode rapid-pvst </code></pre><h2 id="十九、MSTP"><a href="#十九、MSTP" class="headerlink" title="十九、MSTP"></a>十九、MSTP</h2><p>802.1S<br>特点：通过创建和维护实例来降低交换机的资源，实例中可以包含多个vlan，MSTP可以兼容多个版本STP</p><h2 id="二十、基本概念"><a href="#二十、基本概念" class="headerlink" title="二十、基本概念"></a>二十、基本概念</h2><h4 id="①CST：公共生成树-MST域与非MST域之间所运行的STP"><a href="#①CST：公共生成树-MST域与非MST域之间所运行的STP" class="headerlink" title="①CST：公共生成树  MST域与非MST域之间所运行的STP"></a>①CST：公共生成树  MST域与非MST域之间所运行的STP</h4><h4 id="②IST：内部生成树，运行MSTP"><a href="#②IST：内部生成树，运行MSTP" class="headerlink" title="②IST：内部生成树，运行MSTP"></a>②IST：内部生成树，运行MSTP</h4><h4 id="③MSTPI：MSTP内部生成树的实例，默认有实例0且所有的vlan都在其中"><a href="#③MSTPI：MSTP内部生成树的实例，默认有实例0且所有的vlan都在其中" class="headerlink" title="③MSTPI：MSTP内部生成树的实例，默认有实例0且所有的vlan都在其中"></a>③MSTPI：MSTP内部生成树的实例，默认有实例0且所有的vlan都在其中</h4><h4 id="④CISTP：由CST和IST构成的整个交换网络的树"><a href="#④CISTP：由CST和IST构成的整个交换网络的树" class="headerlink" title="④CISTP：由CST和IST构成的整个交换网络的树"></a>④CISTP：由CST和IST构成的整个交换网络的树</h4><h4 id="⑤总根：整个交换网络的根桥"><a href="#⑤总根：整个交换网络的根桥" class="headerlink" title="⑤总根：整个交换网络的根桥"></a>⑤总根：整个交换网络的根桥</h4><h4 id="⑥域根：是MSTP域内的根桥"><a href="#⑥域根：是MSTP域内的根桥" class="headerlink" title="⑥域根：是MSTP域内的根桥"></a>⑥域根：是MSTP域内的根桥</h4><h4 id="⑦主交换机：距离总跟最近的交换机"><a href="#⑦主交换机：距离总跟最近的交换机" class="headerlink" title="⑦主交换机：距离总跟最近的交换机"></a>⑦主交换机：距离总跟最近的交换机</h4><h2 id="二十一、配置"><a href="#二十一、配置" class="headerlink" title="二十一、配置"></a>二十一、配置</h2><pre class=" language-YAML"><code class="language-YAML">SW3(config)#spanning-tree mode mstSW3(config)#spanning-tree mst configurationSW3(config-mst)# name ccnpSW3(config-mst)# revision 1SW3(config-mst)# instance 1 vlan 10, 20, 30SW3(config-mst)# instance 2 vlan 40, 50, 60SW2(config)#spanning-tree mst 1 root primary →更改实例1的根桥</code></pre><h2 id="二十二、STP的优化"><a href="#二十二、STP的优化" class="headerlink" title="二十二、STP的优化"></a>二十二、STP的优化</h2><h4 id="（1）BPDU-guard"><a href="#（1）BPDU-guard" class="headerlink" title="（1）BPDU guard"></a>（1）BPDU guard</h4><p>作用：如果在快速端口收到BPDU，则会将该端口关闭（err-disabled）</p><pre class=" language-YAML"><code class="language-YAML">*Jul  6 03:06:48.486: %SPANTREE-2-BLOCK_BPDUGUARD: Received BPDU on port Ethernet0/2 with BPDU Guard enabled. Disabling port.Sw2#*Jul  6 03:06:48.486: %PM-4-ERR_DISABLE: bpduguard error detected on Et0/2, putting Et0/2 in err-disable state</code></pre><p>（2）配置：</p><pre class=" language-YAML"><code class="language-YAML">①Sw2(config)#spanning-tree portfast edge bpduguard →针对所有portfast接口②Sw2(config-if)#spanning-tree bpduguard enable→强制将在接口下启用 </code></pre><p>err-disabled：错误状态  端口检测到错误的连接，会将端口自动关闭（shut-no shut）<br>bpdufilter（不建议）<br>作用：破坏快速端口的特性，进行正常的生成树端口选举<br>配置：</p><pre class=" language-YAML"><code class="language-YAML">①Sw2(config-if)#spanning-tree bpdufilter enable ②SW5(config)#spanning-tree portfast edge bpdufilter default rootguard</code></pre><p>作用：保护根桥，如果在启用该特性的端口收到更优的BPDU，会将改端口进入blocking状态<br>配置：</p><pre class=" language-YAML"><code class="language-YAML">SW2(config-if)#spanning-tree guard root</code></pre><p>现象： </p><pre class=" language-YAML"><code class="language-YAML">*Jul  6 03:35:32.367: STP: VLAN0001 heard root  4097-aabb.cc00.5000 on Et0/2*Jul  6 03:35:32.367:     supersedes 32769-aabb.cc00.1000*Jul  6 03:35:32.367: %SPANTREE-2-ROOTGUARD_BLOCK: Root guard blocking port Ethernet0/2 on VLAN0001.*Jul  6 03:35:32.367: STP: VLAN0001 sent Topology Change Notice on Et0/0*Jul  6 03:35:32.368: STP[1]: Generating TC trap for port Ethernet0/2*Jul  6 03:35:32.368: STP: VLAN0001 Et0/2 -> blocking loop guard</code></pre><p>作用：检测单向链路所造成的环路问题<br>配置：</p><pre class=" language-YAML"><code class="language-YAML">SW2(config)#spanning-tree loopguard default SW2(config-if)#spanning-tree guard loop </code></pre><p>UDLD：光纤<br>Flexlink：不关心STP，只是对链路做主备</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 交换协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPLS_VPN</title>
      <link href="/2023/01/08/mpls-vpn/"/>
      <url>/2023/01/08/mpls-vpn/</url>
      
        <content type="html"><![CDATA[<h1 id="MPLS：多协议标签交换"><a href="#MPLS：多协议标签交换" class="headerlink" title="MPLS：多协议标签交换"></a>MPLS：多协议标签交换</h1><p>数据包在网络节点的处理方式<br>路由器可以根据功能分成两个平面：控制平面和数据平面<br>控制平面：路由协议、路由表（RIB）→生成路由的下一跳<br>数据平面：CEF表→用来转发<br>①通过CPU的方式处理：<br>每一个数据包都需要CPU处理，解析IP报头的每一个字段<br>②快速转发（一次路由多次交换）：<br>第一个数据包还是需要经过CPU的处理，但是后面的数据包会根据第一次数据包转发时留下的缓存表，直接封装，不需要经过CPU处理。<br>③基于拓扑的快速转发：<br>基于动态路由协议生成CEF表</p><h2 id="一、MPLS的特点"><a href="#一、MPLS的特点" class="headerlink" title="一、MPLS的特点"></a>一、MPLS的特点</h2><h4 id="1、封装位置："><a href="#1、封装位置：" class="headerlink" title="1、封装位置："></a>1、封装位置：</h4><p>数据帧+MPLS+IP，</p><h4 id="2、MPLS格式"><a href="#2、MPLS格式" class="headerlink" title="2、MPLS格式"></a>2、MPLS格式</h4><h6 id="（1）长度："><a href="#（1）长度：" class="headerlink" title="（1）长度："></a>（1）长度：</h6><p>短而定长→4个字节</p><h6 id="（2）label空间"><a href="#（2）label空间" class="headerlink" title="（2）label空间"></a>（2）label空间</h6><p>（20比特）+EXP（3比特）+S（1比特）+TTL（8比特）</p><pre class=" language-YAML"><code class="language-YAML">①label空间：范围2^20a.0-15是系统保留：已经赋予了标签功能，不能给用户使用 i   标签0：IPv4的显式空：倒数最后一跳路由器分配给邻居的标签为0，邻居使用倒数最后一跳设备分配的“0”标签发给倒数最后一跳设备，收到标签“0”读取EXP字段然后直接弹出标签 ii  标签2：IPv6的显式空：作用与IPv4相同，只不过部署在IPv6环境 iii 标签3：隐式空（imp-null）：倒数第一跳设备分配给倒数第二跳设备标签为“3”，倒数第二跳设备收到标签“3”时，如果需要发送数据包给倒数第一跳设备，直接先弹出MPLS标签（LSR为本地设备的网段分配隐式空标签）→思科设备会为路由表中的路由分配标签，华为默认情况下只会给本地直连非物理口的32位主机路由分配标签b.16往后是可以动态分配②EXP：部署QoS→结合标签0、2保证QoS的连续性③S：栈顶栈底标识符→MPLS支持多层嵌套，当S为1时，表示为最底层标签④TTL：生命周期→作用与IPv4的TTL一样，但是两种处理方式</code></pre><h4 id="3、术语"><a href="#3、术语" class="headerlink" title="3、术语"></a>3、术语</h4><h6 id="①LSR："><a href="#①LSR：" class="headerlink" title="①LSR："></a>①LSR：</h6><p>标签交换路由器→所有UP的接口都启用了MPLS</p><h6 id="②LER："><a href="#②LER：" class="headerlink" title="②LER："></a>②LER：</h6><p>标签边缘路由器→部分UP的接口启用了MPLS</p><h6 id="③LSP："><a href="#③LSP：" class="headerlink" title="③LSP："></a>③LSP：</h6><p>标签交换路径→MPLS数据包所走的路径，LSP是单向的，方向与数据包的走向一致，LSP的第一台LER为入节点（ingress）执行的动作是压入标签，最后一台为出节点（egress），中间LSR为中间节点（transit）执行的动作是标签交换，如果涉及PHP，则执行弹出标签，中间节点的个数没有限制，但是入节点和出节点有且只有一个，上游与下游的概念依据数据包的走向（R3→R2→R1：R1是R2的下游，R2是R3的下游）</p><h6 id="④FEC："><a href="#④FEC：" class="headerlink" title="④FEC："></a>④FEC：</h6><p>转发等价类→具有相同特征的报文（源IP、目的IP、源端口、目的端口、VPN）执行相同的转发操作</p><h4 id="4、PHP：倒数第二跳弹出"><a href="#4、PHP：倒数第二跳弹出" class="headerlink" title="4、PHP：倒数第二跳弹出"></a>4、PHP：倒数第二跳弹出</h4><h6 id="①作用："><a href="#①作用：" class="headerlink" title="①作用："></a>①作用：</h6><p>减少LER的查表次数→本地网段分配给邻居的标签为隐式空（标签3）</p><h6 id="②过程："><a href="#②过程：" class="headerlink" title="②过程："></a>②过程：</h6><p>倒数第二台路由器收到标签为“3”，会将对应网段的数据包执行提前弹出标签的动作，在倒数第一台与倒数第二台之间传递的是纯IP数据包</p><h4 id="5、标签的分发协议——LDP"><a href="#5、标签的分发协议——LDP" class="headerlink" title="5、标签的分发协议——LDP"></a>5、标签的分发协议——LDP</h4><h6 id="（1）标签的生成可以通过TDP、LDP、RSVP-TE、MP-BGP"><a href="#（1）标签的生成可以通过TDP、LDP、RSVP-TE、MP-BGP" class="headerlink" title="（1）标签的生成可以通过TDP、LDP、RSVP-TE、MP-BGP"></a>（1）标签的生成可以通过TDP、LDP、RSVP-TE、MP-BGP</h6><h6 id="（2）LDP是公有协议，目前所有厂商支持，是运用最广泛的协议"><a href="#（2）LDP是公有协议，目前所有厂商支持，是运用最广泛的协议" class="headerlink" title="（2）LDP是公有协议，目前所有厂商支持，是运用最广泛的协议"></a>（2）LDP是公有协议，目前所有厂商支持，是运用最广泛的协议</h6><h6 id="（3）LDP建立过程"><a href="#（3）LDP建立过程" class="headerlink" title="（3）LDP建立过程"></a>（3）LDP建立过程</h6><pre class=" language-YAML"><code class="language-YAML">①发现阶段：LDP使用transport address向224.0.0.2发送HELLO报文，使用传输层UDP源和目端口646②建立阶段：LSR相应HELLO包与来源建立LDP会话  a.由RID地址大的一方先发起TCP的SYN报文（由RID地址大的发起TCP连接）  b.由RID大的发送初始报文，携带LDP参数→label space identifier  i:当label space identifier的值为0时代表LDP标签分配是基于设备的→FEC1-X-接口1；FEC-X-接口2  ii:当label space identifier的值为1时代表LDP标签分配是基于接口的→FEC1-A；FEC-B  Mar  6 01:53:09.640: %LDP-5-NBRCHG: LDP Neighbor 4.4.4.4:0 (2) is UP  c.Address message：表明本地设备为自己的路由分配什么标签，LSR为本地设备的网段分配隐式空标签→我分配的标签是邻居访问我时要使用的标签，我使用的标签是邻居分配的  d.通过LDP的HELLO报文以及keep alive保活</code></pre><h4 id="6、MPLS的配置"><a href="#6、MPLS的配置" class="headerlink" title="6、MPLS的配置"></a>6、MPLS的配置</h4><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip cef 默认开启R2(config)#mpls label protocol ldp 默认标签分发协议就是LDPR2(config)#mpls ldp router-id loopback 1 force →将LDP的RID设置为环回口R2(config)#int e0/1R2(config-if)#mpls ip →接口下启用MPLS</code></pre><p>查看命令：</p><pre class=" language-YAML"><code class="language-YAML">R2#show mpls interfaces →哪些接口使能了MPLSR2#show mpls ldp neighbor →查看LDP的信息R2#show mpls ldp bindings →查看本地设备所有的标签信息（自己分配的和邻居分发的）R2#show mpls forwarding-table →MPLS的转发表</code></pre><h4 id="7、路由汇总对MPLS的影响"><a href="#7、路由汇总对MPLS的影响" class="headerlink" title="7、路由汇总对MPLS的影响"></a>7、路由汇总对MPLS的影响</h4><p>影响：如果MPLS区域中LSR做了路由汇总，路由汇总会产生本地直连的汇总路由，LSR会为该路由分配隐式空标签，会造成邻居使用该标签时，提前将MPLS标签弹出，造成LSP中断可能出现由MPLS转发变成IP转发，在VPN环境中会暴露私网IP而产生黑洞。</p><h4 id="8、MPLS解决路由黑洞问题"><a href="#8、MPLS解决路由黑洞问题" class="headerlink" title="8、MPLS解决路由黑洞问题"></a>8、MPLS解决路由黑洞问题</h4><p>在MPLS域中通过对BGP的下一跳打标签，实现MPLS转发然后3层BGP路由不可达问题</p><h4 id="9、MPLS的环路检测"><a href="#9、MPLS的环路检测" class="headerlink" title="9、MPLS的环路检测"></a>9、MPLS的环路检测</h4><p>有两种处理方式：uniform和pipe</p><h6 id="①uniform："><a href="#①uniform：" class="headerlink" title="①uniform："></a>①uniform：</h6><p>在入节点IP的TTL减1然后复制到MPLS的TTL字段，在出节点将MPLS的TTL字段减1然后复制到IP的TTL字段（默认的方式）</p><h6 id="②pipe："><a href="#②pipe：" class="headerlink" title="②pipe："></a>②pipe：</h6><p>MPLS的TTL与IP的TTL没有关系，MPLS的TTL在数据包进入MPLS区域时，TTL值为255，IP字段的TTL值只会在入节点和出节点减1</p><h6 id="③将uniform模式切换为pipe模式"><a href="#③将uniform模式切换为pipe模式" class="headerlink" title="③将uniform模式切换为pipe模式"></a>③将uniform模式切换为pipe模式</h6><p>→R5(config)#no mpls ip  propagate-ttl→出于网络安全的角度考虑，隐藏MPLS区域的拓扑结构</p><h2 id="二、MPLS-VPN"><a href="#二、MPLS-VPN" class="headerlink" title="二、MPLS VPN"></a>二、MPLS VPN</h2><p>VPN的模式：overlay（不需要ISP参与→DMVPN）和peer to peer（需要运营商参与→MPLS VPN）</p><h4 id="1-术语："><a href="#1-术语：" class="headerlink" title="1)术语："></a>1)术语：</h4><h6 id="（1）P设备："><a href="#（1）P设备：" class="headerlink" title="（1）P设备："></a>（1）P设备：</h6><p>ISP网络中没有连接客户的设备</p><h6 id="（2）PE设备："><a href="#（2）PE设备：" class="headerlink" title="（2）PE设备："></a>（2）PE设备：</h6><p>ISP网络中连接客户的设备</p><h6 id="（3）CE设备："><a href="#（3）CE设备：" class="headerlink" title="（3）CE设备："></a>（3）CE设备：</h6><p>客户网络中连接ISP的设备</p><h4 id="2）组件："><a href="#2）组件：" class="headerlink" title="2）组件："></a>2）组件：</h4><h6 id="（1）VRF："><a href="#（1）VRF：" class="headerlink" title="（1）VRF："></a>（1）VRF：</h6><p>虚拟路由转发<br>①作用：在PE上隔离不同客户的路由<br>②配置：只需要在PE上配置</p><pre class=" language-YAML"><code class="language-YAML">R4(config)#ip vrf CAR4(config)#int e0/0R4(config-if)#ip vrf forwarding CA→将接口加入到VRF% Interface Ethernet0/0 IPv4 disabled and address(es) removed due to enabling VRF CAR4#show ip route vrf CAR4#ping vrf CA 202.101.14.1R4#show ip cef vrf CAR4#show ip vrf CA</code></pre><h6 id="（2）RD：路由区分"><a href="#（2）RD：路由区分" class="headerlink" title="（2）RD：路由区分"></a>（2）RD：路由区分</h6><p>①作用：解决PE设备客户地址冲突问题<br>②64比特的RD+IPv4地址=VPNv4地址（96比特）<br>③配置：</p><pre class=" language-YAML"><code class="language-YAML">R4(config-vrf)#rd 65001:100</code></pre><h6 id="（3）RT：路由区分"><a href="#（3）RT：路由区分" class="headerlink" title="（3）RT：路由区分"></a>（3）RT：路由区分</h6><p>①作用：控制VPNv4匹配特定的VRF<br>②import RT和export RT控制PE设备路由的收发，import和export的数字要匹配<br>③配置：</p><pre class=" language-YAML"><code class="language-YAML">R4(config-vrf)#route-target export 65001:100→发出路由携带65001:100R4(config-vrf)#route-target import 65001:100→接收路由携带65001:100</code></pre><h6 id="（4）MP-BGP：多协议BGP"><a href="#（4）MP-BGP：多协议BGP" class="headerlink" title="（4）MP-BGP：多协议BGP"></a>（4）MP-BGP：多协议BGP</h6><p>①作用：只在PE上部署，传递VPNv4路由<br>②配置：</p><pre class=" language-YAML"><code class="language-YAML">R4(config-router)#address-family vpnv4 R4(config-router-af)#neighbor 7.7.7.7 activate R4#show ip bgp vpnv4 all summary </code></pre><h6 id="（5）MPLS的标签栈"><a href="#（5）MPLS的标签栈" class="headerlink" title="（5）MPLS的标签栈"></a>（5）MPLS的标签栈</h6><p>①顶部标签：由ISP网络的的LSR分配的→用于数据包在MPLS骨干网中交换<br>②底部标签：由PE上的MP-BGP分配→用来标识VPNv4路由<br>③结构：IPv4+RD=VPNv4+底部标签（VPNv4标签）+顶部标签（LDP标签）</p><h6 id="（6）PE-CE的路由："><a href="#（6）PE-CE的路由：" class="headerlink" title="（6）PE-CE的路由："></a>（6）PE-CE的路由：</h6><p>传递客户路由</p><h2 id="三、MPLS的配置"><a href="#三、MPLS的配置" class="headerlink" title="三、MPLS的配置"></a>三、MPLS的配置</h2><h4 id="（1）MPLS域中的IGP"><a href="#（1）MPLS域中的IGP" class="headerlink" title="（1）MPLS域中的IGP"></a>（1）MPLS域中的IGP</h4><h4 id="（2）MPLS域中的LDP"><a href="#（2）MPLS域中的LDP" class="headerlink" title="（2）MPLS域中的LDP"></a>（2）MPLS域中的LDP</h4><h4 id="（3）PE上的VRF→RD、RT"><a href="#（3）PE上的VRF→RD、RT" class="headerlink" title="（3）PE上的VRF→RD、RT"></a>（3）PE上的VRF→RD、RT</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#ip vrf CAR4(config-vrf)#rd 65001:100R4(config-vrf)#route-target export 100:1→发送路由携带100:1的BGP属性R4(config-vrf)#route-target import 100:2→接收路由携带100:2的BGP属性R4(config-vrf)#int e0/0 R4(config-if)#ip vrf forwarding CAR4(config-if)#ip address 202.101.14.2 255.255.255.0</code></pre><h4 id="（4）PE之间的MP-BGP"><a href="#（4）PE之间的MP-BGP" class="headerlink" title="（4）PE之间的MP-BGP"></a>（4）PE之间的MP-BGP</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#router bgp 100R4(config-router)#bgp router-id 4.4.4.4R4(config-router)#no bgp default ipv4-unicast→关闭交换IPv4路由R4(config-router)#neighbor 7.7.7.7 remote-as 100R4(config-router)#neighbor 7.7.7.7 update-source Loopback1R4(config-router)#address-family vpnv4→进入VPNv4的地址族R4(config-router-af)#neighbor 7.7.7.7 activate→激活VPNv4邻居关系</code></pre><h4 id="（5）PE-CE之间的IGP"><a href="#（5）PE-CE之间的IGP" class="headerlink" title="（5）PE-CE之间的IGP"></a>（5）PE-CE之间的IGP</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#ip route vrf CA 10.1.1.0 255.255.255.0 202.101.14.1→配置静态路由R7(config)#router ripR7(config-router)#address-family ipv4 vrf CA→将RIP放入vrf CA中R7(config-router)#network 202.101.78.0R7(config-router)#no auto-summaryR7(config-router)#version 2</code></pre><h4 id="（6）重分布：（4）与（5）的重分布"><a href="#（6）重分布：（4）与（5）的重分布" class="headerlink" title="（6）重分布：（4）与（5）的重分布"></a>（6）重分布：（4）与（5）的重分布</h4><pre class=" language-YAML"><code class="language-YAML">R7(config)#router ripR7(config-router)#address-family ipv4 vrf CAR7(config-router)#redistribute bgp 100 metric 1R7(config)#router bgp 100R7(config-router)#address-family ipv4 vrf CAR7(config-router-af)#redistribute ripR4(config)#router bgp 100R4(config-router)#address-family ipv4 vrf CAR4(config-router)#redistribute static</code></pre><p>查看命令</p><pre class=" language-YAML"><code class="language-YAML">R4#show ip bgp vpnv4 all summary R4#show ip bgp vpnv4 all         R4#show ip bgp vpnv4 all 10.1.2.0R4#show ip cef vrf CA 10.1.2.0</code></pre><h6 id="①CA1与CA2-CB1与CB2-CC1与CC2"><a href="#①CA1与CA2-CB1与CB2-CC1与CC2" class="headerlink" title="①CA1与CA2  CB1与CB2  CC1与CC2"></a>①CA1与CA2  CB1与CB2  CC1与CC2</h6><h6 id="②CA1与CC2"><a href="#②CA1与CC2" class="headerlink" title="②CA1与CC2"></a>②CA1与CC2</h6><h6 id="③CC1与CB2、CB2与CC2通过CC1中转-路径跟踪！"><a href="#③CC1与CB2、CB2与CC2通过CC1中转-路径跟踪！" class="headerlink" title="③CC1与CB2、CB2与CC2通过CC1中转 路径跟踪！"></a>③CC1与CB2、CB2与CC2通过CC1中转 路径跟踪！</h6><p>（1）BGP→EBGP的水平分割→最优选<br>（2）OSPF/RIP   DN比特位、域标志、R7的BGP选路（AS-PATH）<br>（3）EIGRP：R7的BGP选路（AS-PATH）  CC属性</p><p>BGP的邻居建立   TCP    update→loop   peer  loop   默认  接口IP    TCP的只有单向的   只有一方发起连接<br>双方都配update  RID大的发起TCP连接   只有一方有配置update   有配置的一方发起TCP连接  connect  es</p><h2 id="四、PE-CE的路由"><a href="#四、PE-CE的路由" class="headerlink" title="四、PE-CE的路由"></a>四、PE-CE的路由</h2><h4 id="（1）静态路由："><a href="#（1）静态路由：" class="headerlink" title="（1）静态路由："></a>（1）静态路由：</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#ip route vrf CA 10.1.1.0 255.255.255.0 202.101.14.1→不是点对点链路必须使用下一跳</code></pre><h4 id="（2）RIP：注意版本→v2"><a href="#（2）RIP：注意版本→v2" class="headerlink" title="（2）RIP：注意版本→v2"></a>（2）RIP：注意版本→v2</h4><pre class=" language-YAML"><code class="language-YAML">R7(config)#router rip    R7(config-router)#address-family ipv4 vrf CAR7(config-router-af)#version 2R7(config-router-af)#network 202.101.78.0R7(config-router-af)#redistribute bgp 100 metric 1在MP-BGP中路由的MED继承IGP的开销</code></pre><h4 id="（3）EIGRP"><a href="#（3）EIGRP" class="headerlink" title="（3）EIGRP"></a>（3）EIGRP</h4><h6 id="①配置"><a href="#①配置" class="headerlink" title="①配置"></a>①配置</h6><pre class=" language-YAML"><code class="language-YAML">R4(config)#router eigrp 90R4(config-router)#address-family ipv4 vrf CB autonomous-system 90→注意AS要配置，主AS号与子AS没有必然联系R4(config-router-af)#network 202.101.24.0R4(config-router-af)#no auto-summary R4(config-router-af)#redistribute bgp 100 metric 10000 1 1 1 1→注意双向重分布</code></pre><p>现象：</p><pre class=" language-YAML"><code class="language-YAML">AS号相同时D        172.16.1.0/24 [90/435200] via 202.101.79.1, 00:01:10, Ethernet0/0AS号不同时D EX     172.16.1.0/24 [170/281856] via 202.101.79.1, 00:00:07, Ethernet0/0②次优路径：a.MP-BGP为EIGRP分配的CC属性： Cost:pre-bestpath:128:409600，BGP路由器在比较EIGRP和MP-IBGP路由时，不比较AD，直接比较开销相同的BGP路由，如果有一条携带CC属性，则优选CC属性的路由（CC属性优先级比权重还高）b.SOO在EIGRP中的使用：通过比对路由中BGP的扩展团体属性SOO，如果路由器收到路由中所携带的SOO与本地一致，则拒绝更新路由R4(config)#route-map sooR4(config-route-map)#set extcommunity soo 100:1R4(config-route-map)#int e0/1R4(config-if)#ip vrf sitemap soo</code></pre><h4 id="（4）OSPF"><a href="#（4）OSPF" class="headerlink" title="（4）OSPF"></a>（4）OSPF</h4><h6 id="①配置-1"><a href="#①配置-1" class="headerlink" title="①配置"></a>①配置</h6><pre class=" language-YAML"><code class="language-YAML">R4(config)#router ospf 110 vrf CC→不同VRF进程号不一样，也不能跟全局OSPF进程号一样R4(config-router)#network 202.101.34.0 0.0.0.255 a 0R4(config-router)#redistribute bgp 100 subnets 注意：MP-BGP重分布OSPF的路由时，默认情况不会重分布外部路由→R7(config-router-af)#redistribute ospf 110 match external internal </code></pre><p>现象：<br>O IA     192.168.10.1 [110/21] via 202.101.107.1, 00:00:09, Ethernet0/0→进程号相同但是也是区域间路由</p><h6 id="②MPLS-VPN中的OSPF超级骨干区域→路由变成OIA的原因"><a href="#②MPLS-VPN中的OSPF超级骨干区域→路由变成OIA的原因" class="headerlink" title="②MPLS  VPN中的OSPF超级骨干区域→路由变成OIA的原因"></a>②MPLS  VPN中的OSPF超级骨干区域→路由变成OIA的原因</h6><p>a.超级骨干区域保证OSPF的区域连续性<br>b.超级骨干区域不会改变OSPF的路由类型→内部路由不变以及外部路由不变<br>c.MP-BGP的开销复制OSPF的开销</p><h6 id="③MP-BGP为OSPF分配的扩展属性"><a href="#③MP-BGP为OSPF分配的扩展属性" class="headerlink" title="③MP-BGP为OSPF分配的扩展属性"></a>③MP-BGP为OSPF分配的扩展属性</h6><p>1）OSPF DOMAIN ID:0x0005:0x0000006E0200→代表的是否在OSPF的相同区域，默认情况下，域ID等于OSPF的进程号</p><pre class=" language-YAML"><code class="language-YAML">（1）作用：如果PE之间的域ID相同，则OSPF的LSA类型保持原有的结构，如果域ID不一样，所有LSA转换为5类LSA（OE2）（2）更改域ID，在PE上配置：R2(config-router)#domain-id 0.0.0.120</code></pre><p>2）OSPF RT:0.0.0.0:2:0：route-type→路由类型<br>前提是，不同站点间的区域号一致</p><pre class=" language-YAML"><code class="language-YAML">O IA   20:1→OSPF RT:0.0.0.0:2:0→区域ID为0，为OSPF的内部路由，0没有意义O IA   50:1→OSPF RT:0.0.0.0:3:0→位区域间路由，0没有意义O E2  30:1→OSPF RT:0.0.0.0:5:1→区域ID为0，为OSPF的外部路由，1代表的是OE2O E1  40:1→OSPF RT:0.0.0.0:5:0→区域ID为0，位OSPF的外部路由，0代表的是OE1区域号不一致，一边是区域0一边是区域1，区域号会变（1）作用：传递OSPF的路由类型（2）三个字段：区域号+OSFP的路由类型+OE1/OE2，a.区域号：代表该路由对端PE所在的区域OSPF的内部还是外部：1类、2类全部为2代表的是区域内、3类LSA为3代表区域间、5类类LSA为5代表OSPF的外部区域，option为0代表OE1，为1代表OE2</code></pre><p>3）OSPF ROUTER ID:202.101.34.2:0<br>4）OSPF的down比特位</p><pre class=" language-YAML"><code class="language-YAML">（1）解决MPLS VPN中PE-CE的次优路径问题（2）PE上将MP-BGP的路由重分布进OSPF时，OSPF会将该条LSA的down比特置1，其他PE收到down比特置1的LSA时，在OSPF的拓扑表中存在，但是不会通过SPF算法添加进路由表（3）扩展：如果站点是多区域的OSPF，那么OSPF区域内的ABR会将DOWN比特置0</code></pre><p>5）域标志：domain-tag</p><pre class=" language-YAML"><code class="language-YAML">（1）作用：早期DOWN比特位不支持5类LSA的次优路径问题，因此引入域标志，PE上将MP-BGP的路由重分布进OSPF时，OSPF的5类LSA会添加域标志，标志为BGP的AS号，如果其他PE设备收到LSA携带域标志，与本地的BGP的AS号进行比较，如果一致则拒绝，反之接收（2）更改域标志</code></pre><pre class=" language-YAML"><code class="language-YAML">R4(config-router)#domain-tag ?  <1-4294967295>  OSPF domain tag - 32-bit value</code></pre><h2 id="五、MPLS-VPN-with-OSPF-的sham-link"><a href="#五、MPLS-VPN-with-OSPF-的sham-link" class="headerlink" title="五、MPLS VPN with OSPF 的sham link"></a>五、MPLS VPN with OSPF 的sham link</h2><h4 id="1）sham-link："><a href="#1）sham-link：" class="headerlink" title="1）sham link："></a>1）sham link：</h4><p>适用于MPLS VPN环境中PE-CE之间采用OSPF，且不同站点之间的OSPF存在后门链路（低速链路）</p><h6 id="（1）作用："><a href="#（1）作用：" class="headerlink" title="（1）作用："></a>（1）作用：</h6><p>解决存在后门链路的情况下，路由选路选择后门链路作为主链路（O），MPLS VPN作为备用链路的情况（O IA）</p><h6 id="（2）sham-link："><a href="#（2）sham-link：" class="headerlink" title="（2）sham link："></a>（2）sham link：</h6><p>在MPLS VPN</p><h6 id="（3）配置："><a href="#（3）配置：" class="headerlink" title="（3）配置："></a>（3）配置：</h6><p>①在PE上设置/32的sham link的地址<br>②sham link要在特定的VRF中</p><pre class=" language-YAML"><code class="language-YAML">interface Loopback2 ip vrf forwarding CA ip address 22.22.22.22 255.255.255.255</code></pre><p>③将sham link地址通告进MP-BGP→不能通告进OSPF</p><pre class=" language-YAML"><code class="language-YAML">address-family ipv4 vrf CA  network 44.44.44.44 mask 255.255.255.255</code></pre><p>④架设sham link</p><pre class=" language-YAML"><code class="language-YAML">router ospf 110area 0 sham-link 44.44.44.44（源） 22.22.22.22（目）</code></pre><h6 id="（5）BGP：常用→简单（不需要重分布）"><a href="#（5）BGP：常用→简单（不需要重分布）" class="headerlink" title="（5）BGP：常用→简单（不需要重分布）"></a>（5）BGP：常用→简单（不需要重分布）</h6><p>①PE的配置：</p><pre class=" language-YAML"><code class="language-YAML">address-family ipv4 vrf CA  neighbor 45.45.45.2 remote-as 65001</code></pre><p>②站点相同AS号问题</p><pre class=" language-YAML"><code class="language-YAML">a.as-overide：将站点的AS号替换为ISP的AS号R4(config-router)#address-family ipv4 vrf CAb.allowas-in：R5(config-router)#neighbor 45.45.45.1 allowas-in </code></pre><p>③如果使用以上功能，EBGP的水平分割会被旁路，使用SOO拒绝路由更新</p><pre class=" language-YAML"><code class="language-YAML">R4(config-router)#address-famiR1(config)#ipv6 route ::/0 2021:14::2ly ipv4 vrf CAR4(config-router-af)#neighbor 45.45.45.2 soo ?  ASN:nn or IP-address:nn  VPN extended community</code></pre><h2 id="六、MCE"><a href="#六、MCE" class="headerlink" title="六、MCE"></a>六、MCE</h2><h4 id="MCE："><a href="#MCE：" class="headerlink" title="MCE："></a>MCE：</h4><p>CE设备部署VRF，实现客户业务隔离</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>R1R2R3有9.9.9.0/24，但是R4的OSPF的数据库有5类LSA但是路由表没有相对应LSA的路由（数据库中的LSA不添加进路由表）</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>capability vrf-lite→关闭DOWN检查<br>具体见录屏</p><h2 id="七、6VPE"><a href="#七、6VPE" class="headerlink" title="七、6VPE"></a>七、6VPE</h2><h4 id="（1）部署IPv6的基本环境"><a href="#（1）部署IPv6的基本环境" class="headerlink" title="（1）部署IPv6的基本环境"></a>（1）部署IPv6的基本环境</h4><pre class=" language-YAML"><code class="language-YAML">R8(config)#ipv6 unicast-routing →开启IPv6功能R1(config-if)#int e0/0R1(config-if)#ipv6 address 2021:14::1/64R1(config)#ipv6 route ::/0 2021:14::2→默认路由</code></pre><h4 id="（2）部署IPv6的VRF"><a href="#（2）部署IPv6的VRF" class="headerlink" title="（2）部署IPv6的VRF"></a>（2）部署IPv6的VRF</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#vrf definition IPv6R4(config-vrf)#rd 100:1R4(config-vrf)#route-target 100:1R4(config-vrf)#address-family ipv6 unicast →开启VRF的IPv6功能R4(config-if)#int e0/0R4(config-if)#vrf forwarding IPv6R4(config-if)#ipv6 address 2021:14::2/64</code></pre><h4 id="（3）部署IPv6的静态路由"><a href="#（3）部署IPv6的静态路由" class="headerlink" title="（3）部署IPv6的静态路由"></a>（3）部署IPv6的静态路由</h4><pre class=" language-YAML"><code class="language-YAML">R4(config)#ipv6 route vrf IPv6 1::1/64 2021:14::1</code></pre><h4 id="（4）部署IPv6的MP-BGP建立VPNv6的邻居关系，在IPv6的VRF中重分布静态"><a href="#（4）部署IPv6的MP-BGP建立VPNv6的邻居关系，在IPv6的VRF中重分布静态" class="headerlink" title="（4）部署IPv6的MP-BGP建立VPNv6的邻居关系，在IPv6的VRF中重分布静态"></a>（4）部署IPv6的MP-BGP建立VPNv6的邻居关系，在IPv6的VRF中重分布静态</h4><pre class=" language-YAML"><code class="language-YAML">router bgp 100 bgp log-neighbor-changes neighbor 4.4.4.4 remote-as 100 neighbor 4.4.4.4 update-source Loopback1 ! address-family vpnv6  neighbor 4.4.4.4 activate  neighbor 4.4.4.4 send-community extended exit-address-family address-family ipv6 vrf IPv6  redistribute static</code></pre><h2 id="八、MPLS-VPN的Internet接入"><a href="#八、MPLS-VPN的Internet接入" class="headerlink" title="八、MPLS VPN的Internet接入"></a>八、MPLS VPN的Internet接入</h2><h4 id="（1）使用双链路或者子接口"><a href="#（1）使用双链路或者子接口" class="headerlink" title="（1）使用双链路或者子接口"></a>（1）使用双链路或者子接口</h4><h6 id="①在PE和CE上创建子接口，划分NAT和MPLS-VPN"><a href="#①在PE和CE上创建子接口，划分NAT和MPLS-VPN" class="headerlink" title="①在PE和CE上创建子接口，划分NAT和MPLS_VPN"></a>①在PE和CE上创建子接口，划分NAT和MPLS_VPN</h6><pre class=" language-YAML"><code class="language-YAML">interface Ethernet0/0.10 description NAT encapsulation dot1Q 10 ip address 202.101.14.2 255.255.255.0interface Ethernet0/0.20 description MPLS_VPN encapsulation dot1Q 20 ip vrf forwarding CA ip address 192.168.14.2 255.255.255.0</code></pre><h6 id="②打通MPLS-VPN→e0-x2F-0-20"><a href="#②打通MPLS-VPN→e0-x2F-0-20" class="headerlink" title="②打通MPLS_VPN→e0/0.20"></a>②打通MPLS_VPN→e0/0.20</h6><h6 id="③部署NAT→e0-x2F-0-10，注意一下，inside和outside接口"><a href="#③部署NAT→e0-x2F-0-10，注意一下，inside和outside接口" class="headerlink" title="③部署NAT→e0/0.10，注意一下，inside和outside接口"></a>③部署NAT→e0/0.10，注意一下，inside和outside接口</h6><h6 id="④默认路由下发→BGP的默认路由下发"><a href="#④默认路由下发→BGP的默认路由下发" class="headerlink" title="④默认路由下发→BGP的默认路由下发"></a>④默认路由下发→BGP的默认路由下发</h6><h4 id="（2）使用Tunnel口"><a href="#（2）使用Tunnel口" class="headerlink" title="（2）使用Tunnel口"></a>（2）使用Tunnel口</h4><h6 id="①打通MPLS-VPN"><a href="#①打通MPLS-VPN" class="headerlink" title="①打通MPLS_VPN"></a>①打通MPLS_VPN</h6><h6 id="②架设隧道→注意Tun配置"><a href="#②架设隧道→注意Tun配置" class="headerlink" title="②架设隧道→注意Tun配置"></a>②架设隧道→注意Tun配置</h6><pre class=" language-YAML"><code class="language-YAML">interface Tunnel1 ip address 192.168.14.2 255.255.255.0 tunnel source Ethernet0/0 tunnel destination 202.101.14.1 tunnel vrf CA→隧道的目的地址从VRF CA路由表中查询</code></pre><h6 id="③部署NAT→隧道口为outside，NAT转换集为隧道口，默认路由的下一跳为隧道口"><a href="#③部署NAT→隧道口为outside，NAT转换集为隧道口，默认路由的下一跳为隧道口" class="headerlink" title="③部署NAT→隧道口为outside，NAT转换集为隧道口，默认路由的下一跳为隧道口"></a>③部署NAT→隧道口为outside，NAT转换集为隧道口，默认路由的下一跳为隧道口</h6><h6 id="④默认路由下发→BGP的默认路由下发-1"><a href="#④默认路由下发→BGP的默认路由下发-1" class="headerlink" title="④默认路由下发→BGP的默认路由下发"></a>④默认路由下发→BGP的默认路由下发</h6><h4 id="（3）使用VRF-Specify-Default-route"><a href="#（3）使用VRF-Specify-Default-route" class="headerlink" title="（3）使用VRF Specify Default route"></a>（3）使用VRF Specify Default route</h4><p>特点：NAT部署在MPLS域中，在域中指定网关（R5-loop1），分支不能通过总部访问Internet</p><h6 id="①MPLS-VPN"><a href="#①MPLS-VPN" class="headerlink" title="①MPLS_VPN"></a>①MPLS_VPN</h6><h6 id="②在PE上部署NAT"><a href="#②在PE上部署NAT" class="headerlink" title="②在PE上部署NAT"></a>②在PE上部署NAT</h6><pre class=" language-YAML"><code class="language-YAML">a.默认路由下一跳：创建VRF的默认路由时，下一跳地址为global路由表中，需要指定VRF默认路由的下一跳地址从global路由表中查找R4(config)#ip route vrf CA 0.0.0.0 0.0.0.0 5.5.5.5 globalb.NAT转换集问题：默认情况下不会转换VRF的路由R4(config)#ip nat inside source list 1 interface e0/3 vrf CA overload </code></pre><h6 id="③默认路由下发，由PE下发给CE"><a href="#③默认路由下发，由PE下发给CE" class="headerlink" title="③默认路由下发，由PE下发给CE"></a>③默认路由下发，由PE下发给CE</h6><h2 id="九、域间MPLS-VPN"><a href="#九、域间MPLS-VPN" class="headerlink" title="九、域间MPLS_VPN"></a>九、域间MPLS_VPN</h2><h4 id="option1：背靠背VRF→ASBR之间建立BGP的邻居关系传递IP路由"><a href="#option1：背靠背VRF→ASBR之间建立BGP的邻居关系传递IP路由" class="headerlink" title="option1：背靠背VRF→ASBR之间建立BGP的邻居关系传递IP路由"></a>option1：背靠背VRF→ASBR之间建立BGP的邻居关系传递IP路由</h4><h4 id="option2：ASBR之间建立MP-BGP邻居传递VPNv4路由"><a href="#option2：ASBR之间建立MP-BGP邻居传递VPNv4路由" class="headerlink" title="option2：ASBR之间建立MP-BGP邻居传递VPNv4路由"></a>option2：ASBR之间建立MP-BGP邻居传递VPNv4路由</h4><h6 id="①R4-config-router-no-bgp-default-route-target-filter-→关闭RT值匹配"><a href="#①R4-config-router-no-bgp-default-route-target-filter-→关闭RT值匹配" class="headerlink" title="①R4(config-router)#no bgp default route-target filter →关闭RT值匹配"></a>①R4(config-router)#no bgp default route-target filter →关闭RT值匹配</h6><h6 id="②PE上存在收到其他站点的BGP路由下一跳不可达"><a href="#②PE上存在收到其他站点的BGP路由下一跳不可达" class="headerlink" title="②PE上存在收到其他站点的BGP路由下一跳不可达"></a>②PE上存在收到其他站点的BGP路由下一跳不可达</h6><p>（1）在ASBR上使用下一跳为自己，VPNv4标签发生变化→VPNv4标签经历两次变化</p><pre class=" language-YAML"><code class="language-YAML">R5(config-router)#address-family vpnv4 R5(config-router-af)#neighbor 7.7.7.7 next-hop-self </code></pre><p>（2）将下一跳重分布进IGP，ASBR之间还是存在下一跳发生变化→VPNv4标签经历一次变化</p><pre class=" language-YAML"><code class="language-YAML">ip prefix-list hop seq 10 permit 192.168.45.2/32route-map hop permit 10 match ip address prefix-list hop redistribute connected route-map hop</code></pre><p>（3）ASBR之间建立LDP→将环回口设置为RID→VPNv4标签经历一次变化</p><pre class=" language-YAML"><code class="language-YAML">interface Ethernet0/0 ip address 192.168.45.2 255.255.255.0 mpls ip</code></pre><h4 id="option3：VPNv4标签在传递的过程不发生变化（VPNv4路由的下一跳不变）"><a href="#option3：VPNv4标签在传递的过程不发生变化（VPNv4路由的下一跳不变）" class="headerlink" title="option3：VPNv4标签在传递的过程不发生变化（VPNv4路由的下一跳不变）"></a>option3：VPNv4标签在传递的过程不发生变化（VPNv4路由的下一跳不变）</h4><h6 id="①RR之间建立MP-EBGP多跳传递VPNv4路由，RR传递路由时，不改变下一跳"><a href="#①RR之间建立MP-EBGP多跳传递VPNv4路由，RR传递路由时，不改变下一跳" class="headerlink" title="①RR之间建立MP-EBGP多跳传递VPNv4路由，RR传递路由时，不改变下一跳"></a>①RR之间建立MP-EBGP多跳传递VPNv4路由，RR传递路由时，不改变下一跳</h6><pre class=" language-YAML"><code class="language-YAML">  neighbor 100.100.100.100 next-hop-unchanged</code></pre><h6 id="②ASBR之间建立EBGP邻居关系，开启标签分发功能"><a href="#②ASBR之间建立EBGP邻居关系，开启标签分发功能" class="headerlink" title="②ASBR之间建立EBGP邻居关系，开启标签分发功能"></a>②ASBR之间建立EBGP邻居关系，开启标签分发功能</h6><pre class=" language-YAML"><code class="language-YAML"> neighbor 192.168.45.2 send-label</code></pre><h6 id="③注意双向重分布→RR的IP地址和路由的下一跳"><a href="#③注意双向重分布→RR的IP地址和路由的下一跳" class="headerlink" title="③注意双向重分布→RR的IP地址和路由的下一跳"></a>③注意双向重分布→RR的IP地址和路由的下一跳</h6><p>作业：三个域间MPLS_VPN 给5个路径跟踪截图</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BGP-CCIE</title>
      <link href="/2023/01/08/bgp-ccie/"/>
      <url>/2023/01/08/bgp-ccie/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP-CCIE"><a href="#BGP-CCIE" class="headerlink" title="BGP-CCIE"></a>BGP-CCIE</h1><h2 id="一、BGP基础"><a href="#一、BGP基础" class="headerlink" title="一、BGP基础"></a>一、BGP基础</h2><h4 id="1、AS："><a href="#1、AS：" class="headerlink" title="1、AS："></a>1、AS：</h4><p>自治系统号</p><h4 id="2、IGP："><a href="#2、IGP：" class="headerlink" title="2、IGP："></a>2、IGP：</h4><p>RIP OSPF  EIGRP  主要用于实现AS内部全网可达（发现和计算路由）</p><h4 id="3、EGP："><a href="#3、EGP：" class="headerlink" title="3、EGP："></a>3、EGP：</h4><p>BGP→工作在AS间，主要用户传递有效路由</p><h4 id="4、BGP的特征"><a href="#4、BGP的特征" class="headerlink" title="4、BGP的特征"></a>4、BGP的特征</h4><p>①属于高级距离矢量路由协议<br>②TCP的三次握手（端口号179）→单播建立邻居关系</p><h4 id="5、BGP的报文"><a href="#5、BGP的报文" class="headerlink" title="5、BGP的报文"></a>5、BGP的报文</h4><p>①open：建立邻居关系<br>②keepalive：维持邻居关系的报文<br>③update：路由更新<br>④notification：报错包<br>⑤route-refresh：软清包</p><h4 id="6、状态"><a href="#6、状态" class="headerlink" title="6、状态"></a>6、状态</h4><p>①idle：查找路由表是否邻居IP可达<br>②connect：TCP三次建立成功→如果建立失败进入ACTIVE<br>③open sent：发送open报文，建立BGP对等体<br>④open confirm：本地路由器确认了对等体的open 报文<br>⑤establish：双方确认了open报文后，进入此状态，BGP对等体建立完毕，开始发送路由更新</p><h4 id="7、BGP路由的处理"><a href="#7、BGP路由的处理" class="headerlink" title="7、BGP路由的处理"></a>7、BGP路由的处理</h4><p>①BGP从路由表中删除，不一定会从BGP表中删除（BGP表中存在，不一定会在路由表中存在）<br>②BGP默认情况下，拓扑表中有多跳，在路由表中只会显示一跳<br>R3(config)#router bgp 200<br>R3(config-router)#maximum-paths 2<br>③BGP通告的条目采用network（可以直接network路由表中存在）</p><h4 id="8、BGP的存在几个要注意的问题"><a href="#8、BGP的存在几个要注意的问题" class="headerlink" title="8、BGP的存在几个要注意的问题"></a>8、BGP的存在几个要注意的问题</h4><h6 id="①下一跳问题"><a href="#①下一跳问题" class="headerlink" title="①下一跳问题"></a>①下一跳问题</h6><p>将EBGP的路由通告给IBGP邻居时，不会更改该路由的下一跳，这样会导致，其他邻居对于该路由的下一跳在路由表中查询不到，从而不通告给任何对等体以及不加路由表<br>解决方法： neighbor 5.5.5.5 next-hop-self→将EBGP邻居的路由，下一跳改为自己</p><h6 id="②更新源问题"><a href="#②更新源问题" class="headerlink" title="②更新源问题"></a>②更新源问题</h6><p>主要存在IBGP对等体建立的过程中，BGP默认情况下使用出接口作为更新源，但是IBGP使用稳定性高的环回口建立邻居，这样会导致更新源不一致的问题。<br>解决方法：neighbor 5.5.5.5 update-source Loopback1→将更新源换成环回口</p><h6 id="③路由黑洞问题"><a href="#③路由黑洞问题" class="headerlink" title="③路由黑洞问题"></a>③路由黑洞问题</h6><p>AS内部不是所有路由器都运行BGP，非BGP的speaker对于BGP路由执行丢包处理→路由黑洞<br>解决方法：<br>a.所有设备运行BGP→采用BGP全互联<br>b.联盟<br>c.RR（路由反射器）<br>d.MPLS：效率最高的以及配置最简单</p><h4 id="9、BGP的水平分割"><a href="#9、BGP的水平分割" class="headerlink" title="9、BGP的水平分割"></a>9、BGP的水平分割</h4><p>①IBGP的水平分割：不会将IBGP路由通告给IBGP对等体<br>②EBGP的水平分割：AS_PATH路径中已经存在了AS号，再进入下一个AS的时候，判断AS_PATH是否有重复的，如果重复，AS边界路由器不接收BGP路由</p><h4 id="10、BGP的同步"><a href="#10、BGP的同步" class="headerlink" title="10、BGP的同步"></a>10、BGP的同步</h4><p>同一条路由要保证IBGP和IGP都可以学习到→防止路由黑洞问题→功能默认关闭</p><h2 id="二、BGP的TTL安全检查"><a href="#二、BGP的TTL安全检查" class="headerlink" title="二、BGP的TTL安全检查"></a>二、BGP的TTL安全检查</h2><h4 id="1、TTL："><a href="#1、TTL：" class="headerlink" title="1、TTL："></a>1、TTL：</h4><p>time to live→生命周期</p><h4 id="2、作用："><a href="#2、作用：" class="headerlink" title="2、作用："></a>2、作用：</h4><p>防止数据包在三层以上无限传输→每经过一个节点，TTL值减1（初始值为255）</p><h4 id="3、BGP对等间的TTL值（默认情况下）"><a href="#3、BGP对等间的TTL值（默认情况下）" class="headerlink" title="3、BGP对等间的TTL值（默认情况下）"></a>3、BGP对等间的TTL值（默认情况下）</h4><p>1）IBGP间的TTL值是多少→255<br>2）EBGP间的TTL值是多少→1</p><h4 id="4、修改TTL值："><a href="#4、修改TTL值：" class="headerlink" title="4、修改TTL值："></a>4、修改TTL值：</h4><p>neighbor 3.3.3.3 ebgp-multihop 255→将EBGP的TTL设置为255<br>注意：邻居地址的可达性</p><h4 id="5、BGP安全检查的作用："><a href="#5、BGP安全检查的作用：" class="headerlink" title="5、BGP安全检查的作用："></a>5、BGP安全检查的作用：</h4><p>防止非直连邻居的DOS攻击</p><h4 id="6、配置："><a href="#6、配置：" class="headerlink" title="6、配置："></a>6、配置：</h4><pre class=" language-YAML"><code class="language-YAML">R3(config-router)#neighbor 23.23.23.1 ttl-security hops 1→要做减法 255-1  TTL有效范围为[254,255)R2#show ip bgp neighbors 23.23.23.2 |  include TTL→查看与邻居的TTL值设置</code></pre><h2 id="三、BGP的路由汇总"><a href="#三、BGP的路由汇总" class="headerlink" title="三、BGP的路由汇总"></a>三、BGP的路由汇总</h2><h4 id="1、以network的方式做汇总→本地需要创建一条静态的汇总路由且下一跳指向null0"><a href="#1、以network的方式做汇总→本地需要创建一条静态的汇总路由且下一跳指向null0" class="headerlink" title="1、以network的方式做汇总→本地需要创建一条静态的汇总路由且下一跳指向null0"></a>1、以network的方式做汇总→本地需要创建一条静态的汇总路由且下一跳指向null0</h4><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip route 10.0.0.0 255.255.0.0 null 0R2(config-router)#network 10.0.0.0 mask 255.255.0.0</code></pre><h4 id="2、R6-config-router-aggregate-address-172-16-0-0-255-255-0-0"><a href="#2、R6-config-router-aggregate-address-172-16-0-0-255-255-0-0" class="headerlink" title="2、R6(config-router)#aggregate-address 172.16.0.0 255.255.0.0"></a>2、R6(config-router)#aggregate-address 172.16.0.0 255.255.0.0</h4><p>现象：详细路由并没有消失，反而还多了一条汇总路由<br>因为：BGP的路由汇总默认情况下详细和汇总同时通告</p><h4 id="3、aggregate-address的参数"><a href="#3、aggregate-address的参数" class="headerlink" title="3、aggregate-address的参数"></a>3、aggregate-address的参数</h4><h6 id="①summary-only："><a href="#①summary-only：" class="headerlink" title="①summary-only："></a>①summary-only：</h6><p>只通告汇总路由，抑制详细路由→因为汇总的AS_PATH属性得看是哪台设备汇总，哪台设备汇总的就是起源在哪台设备的AS</p><h6 id="②as-set："><a href="#②as-set：" class="headerlink" title="②as-set："></a>②as-set：</h6><p>将详细路由的AS_PATH属性赋值会汇总路由</p><h6 id="③advertise-map："><a href="#③advertise-map：" class="headerlink" title="③advertise-map："></a>③advertise-map：</h6><p>通告汇总可以基于某一条详细路由→如果该详细存在在BGP表中，汇总路由也就存在，反之消失</p><pre class=" language-YAML"><code class="language-YAML">R6(config)#access-list 1 permit 172.16.1.0 0.0.0.255R6(config)#route-map adv permit 10R6(config-route-map)#match ip add 1R6(config-router)#aggregate-address 172.16.0.0 255.255.0.0 summary-only advertise-map adv        </code></pre><h6 id="④attribute-map：用户修改汇总路由的属性"><a href="#④attribute-map：用户修改汇总路由的属性" class="headerlink" title="④attribute-map：用户修改汇总路由的属性"></a>④attribute-map：用户修改汇总路由的属性</h6><pre class=" language-YAML"><code class="language-YAML">R6(config)#route-map orR6(config-route-map)#set origin incompleteR6(config-router)#aggregate-address 172.16.0.0 255.255.0.0 summary-only attribute-map or</code></pre><h6 id="⑤suppress-map：抑制汇总路由的子网"><a href="#⑤suppress-map：抑制汇总路由的子网" class="headerlink" title="⑤suppress-map：抑制汇总路由的子网"></a>⑤suppress-map：抑制汇总路由的子网</h6><pre class=" language-YAML"><code class="language-YAML">R6(config)#access-list 1 permit 172.16.1.0 0.0.0.255R6(config)#route-map sup permit 10R6(config-route-map)#match ip add 1R6(config-router)#aggregate-address 172.16.0.0 255.255.0.0 suppress-map sup</code></pre><p>现象： s&gt;i 172.16.1.0/24    3.3.3.3                  0    100      0 100 i<br>s：代表抑制路由通告</p><h6 id="⑥路由泄漏：unsuppress-map"><a href="#⑥路由泄漏：unsuppress-map" class="headerlink" title="⑥路由泄漏：unsuppress-map"></a>⑥路由泄漏：unsuppress-map</h6><pre class=" language-YAML"><code class="language-YAML">R6(config)#access-list 1 permit 172.16.1.0 0.0.0.255R6(config)#route-map unsup permit 10R6(config-route-map)#match ip add 1R6(config-router)#neighbor 67.67.67.2 unsuppress-map unsup</code></pre><p><strong>引入：负载均衡的方式</strong></p><pre class=" language-YAML"><code class="language-YAML">R6(config-if)#ip load-sharing ?  per-destination  Deterministic distribution→基于目的地址→默认的负载均衡方式  per-packet       Random distribution→基于数据包→轮询→100包两个接口55开</code></pre><h4 id="4、汇总路由的两个属性"><a href="#4、汇总路由的两个属性" class="headerlink" title="4、汇总路由的两个属性"></a>4、汇总路由的两个属性</h4><pre class=" language-YAML"><code class="language-YAML">①atomic-aggregate：通知下游路由器这是一条汇总路由并且该路由的AS_PATH路径不完整（as-set）②aggregated：做汇总的路由器是谁，在哪个AS内部</code></pre><h2 id="四、BGP的默认路由下发"><a href="#四、BGP的默认路由下发" class="headerlink" title="四、BGP的默认路由下发"></a>四、BGP的默认路由下发</h2><h4 id="1、default"><a href="#1、default" class="headerlink" title="1、default"></a>1、default</h4><p>→R2(config-router)#neighbor 23.23.23.2 default-originate→指定给某一个邻居发送默认路由</p><h4 id="2、本地产生一条默认路由，再network→大家都有"><a href="#2、本地产生一条默认路由，再network→大家都有" class="headerlink" title="2、本地产生一条默认路由，再network→大家都有"></a>2、本地产生一条默认路由，再network→大家都有</h4><pre class=" language-YAML"><code class="language-YAML">①R2(config)#ip route 0.0.0.0 0.0.0.0 null 0②R2(config-router)#network 0.0.0.0        </code></pre><h4 id="3、默认路由-重分布-default→大家都有"><a href="#3、默认路由-重分布-default→大家都有" class="headerlink" title="3、默认路由+重分布+default→大家都有"></a>3、默认路由+重分布+default→大家都有</h4><pre class=" language-YAML"><code class="language-YAML">①R2(config)#ip route 0.0.0.0 0.0.0.0 null 0②R2(config-router)#redistribute static ③R2(config-router)#default-information originate </code></pre><h2 id="五、BGP属性"><a href="#五、BGP属性" class="headerlink" title="五、BGP属性"></a>五、BGP属性</h2><h4 id="（1）分类"><a href="#（1）分类" class="headerlink" title="（1）分类"></a>（1）分类</h4><h6 id="①公认必遵：update必须携带-起源-AS-APTH-next-hop"><a href="#①公认必遵：update必须携带-起源-AS-APTH-next-hop" class="headerlink" title="①公认必遵：update必须携带 起源  AS-APTH next-hop"></a>①公认必遵：update必须携带 起源  AS-APTH next-hop</h6><h6 id="②公认可选：update中可有可没有-本地优先级"><a href="#②公认可选：update中可有可没有-本地优先级" class="headerlink" title="②公认可选：update中可有可没有  本地优先级"></a>②公认可选：update中可有可没有  本地优先级</h6><h6 id="③可选传递：我不知道但是我会传"><a href="#③可选传递：我不知道但是我会传" class="headerlink" title="③可选传递：我不知道但是我会传"></a>③可选传递：我不知道但是我会传</h6><h6 id="④可选非传递：我不知道我也不传"><a href="#④可选非传递：我不知道我也不传" class="headerlink" title="④可选非传递：我不知道我也不传"></a>④可选非传递：我不知道我也不传</h6><h4 id="（2）属性"><a href="#（2）属性" class="headerlink" title="（2）属性"></a>（2）属性</h4><h6 id="①权重：weight→思科私有（华为→协议首选值）"><a href="#①权重：weight→思科私有（华为→协议首选值）" class="headerlink" title="①权重：weight→思科私有（华为→协议首选值）"></a>①权重：weight→思科私有（华为→协议首选值）</h6><p>1）作用：决定本地设备离开当前AS的出口在哪里<br>2）规则：本地产生的BGP路由，权重值为32768，通过邻居学习到的路由，权重为0，比较时越大越优<br>3）配置：</p><pre class=" language-YAML"><code class="language-YAML">a.通过ACL或者前缀列表匹配感兴趣的网段R12(config)#access-list 1 permit 11.11.11.0 0.0.0.255 b.route-map写BGP属性策略R12(config)#route-map weight permit 10R12(config-route-map)#match ip add 1R12(config-route-map)#set weight 10R12(config)#route-map weight permit 20c.在BGP进程下调用→注意邻居和方向R12(config-router)#neighbor  126.126.126.1 route-map weight ind.软清</code></pre><h6 id="②本地优先级"><a href="#②本地优先级" class="headerlink" title="②本地优先级"></a>②本地优先级</h6><p>1）作用：决定AS内部离开本AS从哪个出口出去<br>2）规则：IBGP邻居关系的本地优先级为100，EBGP邻居关系以及本地产生的本地优先级为空→本地优先级只能在AS内部传递→数值越大越优<br>3）配置：</p><pre class=" language-YAML"><code class="language-YAML">R10(config)#access-list 1 permit 10.1.1.0 0.0.0.255R10(config)#route-map loc permit 10R10(config-route-map)#match ip add 1R10(config-route-map)#set local-preference 150R10(config-route-map)#exitR10(config)#route-map loc permit 20R10(config)#router bgp 400R10(config-router)#neighbor 103.103.103.1 route-map loc in</code></pre><h6 id="③本地产生的路由（下一跳）"><a href="#③本地产生的路由（下一跳）" class="headerlink" title="③本地产生的路由（下一跳）"></a>③本地产生的路由（下一跳）</h6><p>收到来自EBGP路由通告给IBGP对等体时，下一跳保持不变（EBGP对等体的接口IP）<br>本地产生的路由下一跳为0.0.0.0</p><h6 id="④AS-PATH"><a href="#④AS-PATH" class="headerlink" title="④AS-PATH"></a>④AS-PATH</h6><pre class=" language-YAML"><code class="language-YAML">*>i 10.1.3.0/24      2.2.2.2                  0    100      0 200 300 i经过一个AS时会记录AS号，最右端代表起源AS，最左端代表本地AS的邻居AS是多少规则：AS_PATH选择路径最短的R12(config)#access-list 2 permit 10.1.1.0 0.0.0.255R12(config)#route-map as permit 10R12(config-route-map)#match ip add 2R12(config-route-map)#set as-path prepend 150 250 350             or            R12(config-route-map)#set as-path prepend last-as 3→将AS号复制三遍R12(config)#router bgp 500R12(config-router)#neighbor  126.126.126.1 route-map as in</code></pre><h6 id="⑤orgin"><a href="#⑤orgin" class="headerlink" title="⑤orgin"></a>⑤orgin</h6><p>1）作用：告知该BGP路由是如何进入BGP进程<br>2）规则</p><pre class=" language-YAML"><code class="language-YAML">a.i→以network方式通告；e→以EGP协议重分布进BGP；？→IGP协议重分布进BGPb.优先级：i>e>?c.前i：该路由是IBGP邻居通告的；后i：orgin</code></pre><p>3）配置</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#access-list 1 permit 172.16.1.0 0.0.0.255R2(config)#route-map or permit 10R2(config-route-map)#match ip add 1R2(config)#route-map or permit 20R2(config-router)#neighbor 1.1.1.1 route</code></pre><h6 id="⑥MED"><a href="#⑥MED" class="headerlink" title="⑥MED"></a>⑥MED</h6><p>1）作用：告诉对端AS到达本地的开销是多少<br>2）规则：越小越优，不会跨AS传播<br>3）配置</p><pre class=" language-YAML"><code class="language-YAML">R6(config)#access-list 1 permit 10.1.1.0 0.0.0.255R6(config)#route-map med permit 10R6(config-route-map)#match ip add 1R6(config-route-map)#set metric 10R6(config-route-map)#exitR6(config)#route-map med permit 20R6(config-router)#neighbor 126.126.126.2 route-map med out </code></pre><p>4）默认情况，BGP只会比较相同AS的MED，如果要比较不同AS的MED值</p><pre class=" language-YAML"><code class="language-YAML">→R12(config-router)#bgp always-compare-med </code></pre><h4 id="（3）团体属性"><a href="#（3）团体属性" class="headerlink" title="（3）团体属性"></a>（3）团体属性</h4><h6 id="①分类"><a href="#①分类" class="headerlink" title="①分类"></a>①分类</h6><p>1)公认团体属性：前缀携带该属性，就可以执行动作，无需自己定义<br>2)私有团体属性：前缀携带该属性，可以自定义对路由的操作</p><h6 id="②公认团体属性"><a href="#②公认团体属性" class="headerlink" title="②公认团体属性"></a>②公认团体属性</h6><p>1）no-advertise：不通告给任何BGP对等体</p><pre class=" language-YAML"><code class="language-YAML">access-list 1 permit 172.16.1.0 0.0.0.255route-map comm permit 10 match ip address 1 set community no-advertiseroute-map comm permit 20 neighbor 23.23.23.2 route-map comm out neighbor 23.23.23.2 send-community→默认情况，BGP在更新路由的时候会剥离团体属性，写上这条命令，更新路由携带团体属性</code></pre><p>2）no-export：不通告给真正的EBGP对等体</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#route-map comm permit 20R2(config)#access-list 2 permit 172.16.2.0 0.0.0.255R2(config-route-map)#set community  no-export </code></pre><p>3）local-AS：不通告给任何EBGP对等体<br>4）internet：什么都没有</p><h6 id="③私有团体属性"><a href="#③私有团体属性" class="headerlink" title="③私有团体属性"></a>③私有团体属性</h6><p>1）打上私有团体属性的标记→route-map</p><pre class=" language-YAML"><code class="language-YAML">access-list 3 permit 172.16.3.0 0.0.0.255route-map comm permit 30 match ip address 3 set community 100:1route-map comm permit 40R2(config)#ip bgp-community new-format →标记格式转换</code></pre><p>2）匹配标记→团体列表（community-list）</p><pre class=" language-YAML"><code class="language-YAML">a.community-list：用于匹配标记→permit/denyb.隐式拒绝所有c.标准和扩展d.ip community-list 1 permit 100:1e.路由图下匹配R3(config-route-map)#match community 100:1 200:1 exact-match→匹配100:1和200:1的路由</code></pre><p>3）执行动作→route-map→route-map里面还要匹配community-list</p><pre class=" language-YAML"><code class="language-YAML">route-map loc permit 10 match community 1 set local-preference 200route-map loc permit 20 neighbor 23.23.23.1 route-map loc in</code></pre><p>删除标记</p><pre class=" language-YAML"><code class="language-YAML">R4(config)#ip community-list 1 permit 100:1R4(config)#route-map comm permit 10R4(config-route-map)#match community 1R4(config-route-map)#set comm-list 1 delete R4(config-router)#neighbor 3.3.3.3 route-map comm in </code></pre><p>扩展→cost→Compare before all other steps in bestpath calculation</p><pre class=" language-YAML"><code class="language-YAML">R4(config-route-map)#set extcommunity cost pre-bestpath 1 100000</code></pre><p>现象： Extended Community: Cost:pre-bestpath:1:100000</p><h2 id="六、BGP的不等价负载均衡"><a href="#六、BGP的不等价负载均衡" class="headerlink" title="六、BGP的不等价负载均衡"></a>六、BGP的不等价负载均衡</h2><h4 id="（1）作用：基于带宽的比例发送数据包→EIGRP的不等价负载均衡"><a href="#（1）作用：基于带宽的比例发送数据包→EIGRP的不等价负载均衡" class="headerlink" title="（1）作用：基于带宽的比例发送数据包→EIGRP的不等价负载均衡"></a>（1）作用：基于带宽的比例发送数据包→EIGRP的不等价负载均衡</h4><h4 id="（2）配置"><a href="#（2）配置" class="headerlink" title="（2）配置"></a>（2）配置</h4><pre class=" language-YAML"><code class="language-YAML">R3(config)#router bgp 200R3(config-router)#maximum-paths 2R3(config-router)#bgp dmzlink-bw R3(config-router)#neighbor 39.39.39.2 dmzlink-bw R3(config-router)#neighbor 103.103.103.2 dmzlink-bw </code></pre><p>口诀：PLLAOMEN→漂亮老男人</p><h2 id="七、BGP的路由过滤"><a href="#七、BGP的路由过滤" class="headerlink" title="七、BGP的路由过滤"></a>七、BGP的路由过滤</h2><h4 id="（1）使用ACL→匹配工具→分发列表→distributi-list"><a href="#（1）使用ACL→匹配工具→分发列表→distributi-list" class="headerlink" title="（1）使用ACL→匹配工具→分发列表→distributi-list"></a>（1）使用ACL→匹配工具→分发列表→distributi-list</h4><pre class=" language-YAML"><code class="language-YAML">R2(config)#access-list 1 permit 172.16.1.0 0.0.0.255R2(config-router)#neighbor 1.1.1.1 distribute-list 1 in</code></pre><h4 id="（2）前缀列表→ip-prefix-list→可以特定匹配某一个子网掩码长度的网段"><a href="#（2）前缀列表→ip-prefix-list→可以特定匹配某一个子网掩码长度的网段" class="headerlink" title="（2）前缀列表→ip prefix-list→可以特定匹配某一个子网掩码长度的网段"></a>（2）前缀列表→ip prefix-list→可以特定匹配某一个子网掩码长度的网段</h4><h6 id="①格式："><a href="#①格式：" class="headerlink" title="①格式："></a>①格式：</h6><pre class=" language-YAML"><code class="language-YAML">ip prefix-list 名称 permit/deny 网络号/掩码 eq1:ip prefix-list zwh permit 192.168.1.0/24eq2:</code></pre><h6 id="②扩展：ge→大于等于-le→小于等于"><a href="#②扩展：ge→大于等于-le→小于等于" class="headerlink" title="②扩展：ge→大于等于   le→小于等于"></a>②扩展：ge→大于等于   le→小于等于</h6><h6 id="③特殊的路由"><a href="#③特殊的路由" class="headerlink" title="③特殊的路由"></a>③特殊的路由</h6><pre class=" language-YAML"><code class="language-YAML">a.R2(config)#ip prefix-list zwh permit 0.0.0.0/0 le 32b.A类：ip prefix-list zwh permit 1.0.0.0/1  le 8c.B类：ip prefix-list zwh permit 129.0.0.0/2  le 16</code></pre><h6 id="④BGP中的前缀列表"><a href="#④BGP中的前缀列表" class="headerlink" title="④BGP中的前缀列表"></a>④BGP中的前缀列表</h6><p>a.使用分发列表调用</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip prefix-list zwh deny 10.1.1.0/24R2(config)#ip prefix-list zwh permit 0.0.0.0/0 le 32R2(config-router)#distribute-list prefix zwh out ospf 110</code></pre><p>b.直接调用</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip prefix-list zwh deny 10.1.1.0/24R2(config)#ip prefix-list zwh permit 0.0.0.0/0 le 32R2(config)#router bgp 100R2(config-router)#neighbor 23.23.23.2 prefix-list zwh in</code></pre><h4 id="（3）route-map"><a href="#（3）route-map" class="headerlink" title="（3）route-map"></a>（3）route-map</h4><p>拒绝11.11.11.0/24</p><h6 id="①前缀列表用来匹配→permit-匹配谁"><a href="#①前缀列表用来匹配→permit-匹配谁" class="headerlink" title="①前缀列表用来匹配→permit   匹配谁"></a>①前缀列表用来匹配→permit   匹配谁</h6><h6 id="②route-map要用deny-匹配后干嘛-拒绝"><a href="#②route-map要用deny-匹配后干嘛-拒绝" class="headerlink" title="②route-map要用deny  匹配后干嘛  拒绝"></a>②route-map要用deny  匹配后干嘛  拒绝</h6><pre class=" language-YAML"><code class="language-YAML">R3(config)#ip prefix-list 400 permit 11.11.11.0/24       R3(config)#route-map zwh deny 10R3(config-route-map)#match ip address prefix-list 400R3(config)#route-map zwh permit 20R3(config-router)#neighbor 39.39.39.2 route-map zwh in </code></pre><h4 id="（4）AS-PATH-list"><a href="#（4）AS-PATH-list" class="headerlink" title="（4）AS-PATH list"></a>（4）AS-PATH list</h4><h6 id="①匹配的是AS-PATH"><a href="#①匹配的是AS-PATH" class="headerlink" title="①匹配的是AS-PATH"></a>①匹配的是AS-PATH</h6><pre class=" language-YAML"><code class="language-YAML">1）. ：任意一个字符包括空格   2) * :出现零次或者更多3）+ :出现一次或者更多4）？：出现一次或者零次→Ctrl+v shift ？5）^：以什么开始6）$：以什么结束7）_ :匹配任意下划线8）\：转义字符→还原字符原来的含义 9）[]：代表区间[1-3]10) | :代表“or”②^$：匹配本地的路由③.*：匹配所有</code></pre><p><strong>案例一：</strong> 只接受起源在AS100的路由</p><pre class=" language-YAML"><code class="language-YAML">R7(config)#ip as-path access-list 1 permit _100$R7(config-router)#neighbor 67.67.67.1 filter-list 1 in</code></pre><p><strong>案例二：</strong> 只通告本地AS产生的路由</p><pre class=" language-YAML"><code class="language-YAML">R6(config)#ip as-path access-list 1 permit ^$R6(config)#router bgp 200R6(config-router)#neighbor 67.67.67.2 filter-list 1 out </code></pre><p><strong>案例三：</strong> 不通告本地AS产生的路由</p><pre class=" language-YAML"><code class="language-YAML">R6(config)#ip as-path access-list 1 deny ^$R6(config)#ip as-path access-list 1 permit .*R6(config-router)#neighbor 67.67.67.2 filter-list 1 out </code></pre><h2 id="八、出站路由过滤（ORF）"><a href="#八、出站路由过滤（ORF）" class="headerlink" title="八、出站路由过滤（ORF）"></a>八、出站路由过滤（ORF）</h2><h4 id="（1）客户和服务端："><a href="#（1）客户和服务端：" class="headerlink" title="（1）客户和服务端："></a>（1）客户和服务端：</h4><p>由客户端发起ORF请求，请求所需要的路由，服务端根据请求信息特定回应→最小化减少BGP对等之间的BGP更新路由</p><h4 id="（2）配置-1"><a href="#（2）配置-1" class="headerlink" title="（2）配置"></a>（2）配置</h4><p>服务端</p><pre class=" language-YAML"><code class="language-YAML">R1(config-router)#neighbor 2.2.2.2 capability orf prefix-list receive </code></pre><p>客户端</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip prefix-list zwh permit 172.16.1.0/24R2(config-router)#neighbor 1.1.1.1 capability orf prefix-list send R2(config-router)#neighbor 1.1.1.1 prefix-list zwh in</code></pre><p>多个过滤工具使用时</p><pre class=" language-YAML"><code class="language-YAML">→route-map→filter-list→prefix-list→BGP表→filter-list→route-map→prefix-list→</code></pre><h2 id="九、BGP的条件通告"><a href="#九、BGP的条件通告" class="headerlink" title="九、BGP的条件通告"></a>九、BGP的条件通告</h2><h4 id="（1）路由的通告可以取决于某一条路由是否存在"><a href="#（1）路由的通告可以取决于某一条路由是否存在" class="headerlink" title="（1）路由的通告可以取决于某一条路由是否存在"></a>（1）路由的通告可以取决于某一条路由是否存在</h4><h4 id="（2）参数：advertise-map→用来通告-（non）exist-map→条件"><a href="#（2）参数：advertise-map→用来通告-（non）exist-map→条件" class="headerlink" title="（2）参数：advertise-map→用来通告   （non）exist-map→条件"></a>（2）参数：advertise-map→用来通告   （non）exist-map→条件</h4><h4 id="（3）配置"><a href="#（3）配置" class="headerlink" title="（3）配置"></a>（3）配置</h4><pre class=" language-YAML"><code class="language-YAML">R2(config)#ip prefix-list adv permit 100.100.100.0/24→通告的路由R2(config)#ip prefix-list exit permit 172.16.1.0/24→条件路由R2(config)#route-map adv permit 10R2(config-route-map)#match ip add prefix-list advR2(config)#route-map exit permit 10R2(config-route-map)#match ip add prefix-list exitR2(config-router)#neighbor 23.23.23.2 advertise-map adv  exist-map exit→路由存在就通告R2(config-router)#neighbor 23.23.23.2 advertise-map adv non-exist-map exit →不存在才通告R2#show ip bgp neighbors 23.23.23.2 advertised-routes →通告给邻居23.23.23.2哪些路由</code></pre><h2 id="十、BGP的优化"><a href="#十、BGP的优化" class="headerlink" title="十、BGP的优化"></a>十、BGP的优化</h2><h4 id="（1）联盟"><a href="#（1）联盟" class="headerlink" title="（1）联盟"></a>（1）联盟</h4><h6 id="①将大AS设置为联盟ID，并且在联盟内部设置多个小AS，小AS内的BGP-speaker建立IBGP全互联，小AS间的BGP-speaker建立联盟内的EBGP对等体，外部AS对联盟内部的小AS结构不可知，联盟内的小AS号对外不传递出去"><a href="#①将大AS设置为联盟ID，并且在联盟内部设置多个小AS，小AS内的BGP-speaker建立IBGP全互联，小AS间的BGP-speaker建立联盟内的EBGP对等体，外部AS对联盟内部的小AS结构不可知，联盟内的小AS号对外不传递出去" class="headerlink" title="①将大AS设置为联盟ID，并且在联盟内部设置多个小AS，小AS内的BGP speaker建立IBGP全互联，小AS间的BGP speaker建立联盟内的EBGP对等体，外部AS对联盟内部的小AS结构不可知，联盟内的小AS号对外不传递出去"></a>①将大AS设置为联盟ID，并且在联盟内部设置多个小AS，小AS内的BGP speaker建立IBGP全互联，小AS间的BGP speaker建立联盟内的EBGP对等体，外部AS对联盟内部的小AS结构不可知，联盟内的小AS号对外不传递出去</h6><h6 id="②配置"><a href="#②配置" class="headerlink" title="②配置"></a>②配置</h6><pre class=" language-YAML"><code class="language-YAML">R3(config)#router bgp 65001→AS为小ASR3(config-router)#bgp confederation identifier 200→真正的AS号（大AS）R3(config-router)#bgp confederation peers 65002→对方是一个联盟内的小ASR3(config-router)#neighbor 23.23.23.1 remote-as 100R3(config-router)#neighbor 39.39.39.2 remote-as 400R3(config-router)#neighbor 5.5.5.5 remote-as 65001R3(config-router)#neighbor 5.5.5.5 update-source l1R3(config-router)#neighbor 5.5.5.5 next-hop-self R3(config-router)#neighbor 34.34.34.2 remote-as 65002</code></pre><h6 id="③AS-PATH的变化"><a href="#③AS-PATH的变化" class="headerlink" title="③AS-PATH的变化"></a>③AS-PATH的变化</h6><p> *&gt;  11.11.11.0/24    3.3.3.3                  0    100      0 (65001) 400 i→括号内代表的是联盟内的小AS</p><h4 id="（2）路由反射器RR"><a href="#（2）路由反射器RR" class="headerlink" title="（2）路由反射器RR"></a>（2）路由反射器RR</h4><h6 id="①角色："><a href="#①角色：" class="headerlink" title="①角色："></a>①角色：</h6><p>RR（打破水平分割）  client  non-client</p><h6 id="②原理："><a href="#②原理：" class="headerlink" title="②原理："></a>②原理：</h6><p>client收到一条EBGP路由，会将该路由反射给RR，RR再将该路由反射给client以及non-client（所有对等体），non-client收到一条EBGP路由，执行正常的IBGP操作，将路由通告个RR，RR将这条路由反射给client以及EBGP对等体</p><h6 id="③配置："><a href="#③配置：" class="headerlink" title="③配置："></a>③配置：</h6><pre class=" language-YAML"><code class="language-YAML">a.指定一台RR，然后client只跟RR建立IBGP对等体，RR与client建立IBGP对等体router bgp 200 bgp log-neighbor-changes neighbor 3.3.3.3 remote-as 200 neighbor 3.3.3.3 update-source Loopback1 neighbor 3.3.3.3 route-reflector-client→指定客户端 neighbor 5.5.5.5 remote-as 200 neighbor 5.5.5.5 update-source Loopback1 neighbor 5.5.5.5 route-reflector-client neighbor 6.6.6.6 remote-as 200 neighbor 6.6.6.6 update-source Loopback1 neighbor 6.6.6.6 route-reflector-client</code></pre><h6 id="④冗余的RR环境"><a href="#④冗余的RR环境" class="headerlink" title="④冗余的RR环境"></a>④冗余的RR环境</h6><p>a.造成BGP路由的多个副本<br>b.解决方法</p><h6 id="①群集ID→Cluster-list-4-4-4-4"><a href="#①群集ID→Cluster-list-4-4-4-4" class="headerlink" title="①群集ID→Cluster list: 4.4.4.4"></a>①群集ID→Cluster list: 4.4.4.4</h6><p>→群集列表包含本地的群集ID不会被反射<br>R5(config-router)#bgp cluster-id</p><h6 id="②orging-ID→Originator-3-3-3-3→起源ID："><a href="#②orging-ID→Originator-3-3-3-3→起源ID：" class="headerlink" title="②orging-ID→Originator: 3.3.3.3→起源ID："></a>②orging-ID→Originator: 3.3.3.3→起源ID：</h6><p>发现BGP路由中的起源ID与本地的RID一致，则忽略更新</p><h2 id="十一、BGP的对等体组"><a href="#十一、BGP的对等体组" class="headerlink" title="十一、BGP的对等体组"></a>十一、BGP的对等体组</h2><h4 id="（1）只是配置上的优化，为重复的代码创建一个组，针对邻居调用"><a href="#（1）只是配置上的优化，为重复的代码创建一个组，针对邻居调用" class="headerlink" title="（1）只是配置上的优化，为重复的代码创建一个组，针对邻居调用"></a>（1）只是配置上的优化，为重复的代码创建一个组，针对邻居调用</h4><h4 id="（2）配置-2"><a href="#（2）配置-2" class="headerlink" title="（2）配置"></a>（2）配置</h4><pre class=" language-YAML"><code class="language-YAML">router bgp 200 neighbor IBGP peer-group→创建对等体组 neighbor IBGP remote-as 200 neighbor IBGP update-source Loopback1 neighbor IBGP route-reflector-client neighbor 3.3.3.3 peer-group IBGP→调用对等体组 neighbor 5.5.5.5 peer-group IBGP neighbor 6.6.6.6 peer-group IBGP</code></pre><h2 id="十二、BGP的动态建立"><a href="#十二、BGP的动态建立" class="headerlink" title="十二、BGP的动态建立"></a>十二、BGP的动态建立</h2><pre class=" language-YAML"><code class="language-YAML">R4(config-router)#bgp listen limit 3→动态建立的最大数量R4(config-router)#bgp listen range 0.0.0.0/0 peer-group IBGP→跟所有IP建立BGP的邻居</code></pre><h2 id="十三、BGP的ADD-PATH"><a href="#十三、BGP的ADD-PATH" class="headerlink" title="十三、BGP的ADD-PATH"></a>十三、BGP的ADD-PATH</h2><h4 id="（1）引入可能存在的问题："><a href="#（1）引入可能存在的问题：" class="headerlink" title="（1）引入可能存在的问题："></a>（1）引入可能存在的问题：</h4><p>RR会将自己认为最优的下一跳传递给client，但是这条路由对于client不一定是最优的下一跳，因此会造成次优路径</p><h4 id="（2）ADD-PATH："><a href="#（2）ADD-PATH：" class="headerlink" title="（2）ADD-PATH："></a>（2）ADD-PATH：</h4><p>RR反射所有client传递过来的相同路由，让client自己判断最优下一跳</p><h4 id="（3）配置："><a href="#（3）配置：" class="headerlink" title="（3）配置："></a>（3）配置：</h4><p>RR端：</p><pre class=" language-YAML"><code class="language-YAML"> neighbor IBGP additional-paths send→发送add-path bgp additional-paths select all best 2→选择所有最优的2条 neighbor IBGP advertise additional-paths all best 2→通告最优的2条 maximum-paths ibgp 2→指定IBGP有两个下一跳</code></pre><p>client端：</p><pre class=" language-YAML"><code class="language-YAML"> bgp additional-paths receive→client接收</code></pre><p>现象：</p><pre class=" language-YAML"><code class="language-YAML">*>i 12.12.12.0/24    6.6.6.6                  0    100      0 500 i * ia                 5.5.5.5                  0    100      0 500 i</code></pre><p>a：代表多路径</p><h2 id="十四、BGP的对等体模板"><a href="#十四、BGP的对等体模板" class="headerlink" title="十四、BGP的对等体模板"></a>十四、BGP的对等体模板</h2><h4 id="（1）分类：会话模板和策略模板"><a href="#（1）分类：会话模板和策略模板" class="headerlink" title="（1）分类：会话模板和策略模板"></a>（1）分类：会话模板和策略模板</h4><h4 id="（2）会话模板：继承最多7个模板→peer-session"><a href="#（2）会话模板：继承最多7个模板→peer-session" class="headerlink" title="（2）会话模板：继承最多7个模板→peer-session"></a>（2）会话模板：继承最多7个模板→peer-session</h4><pre class=" language-YAML"><code class="language-YAML">AS→password→looptemplate peer-session AS  remote-as 200 exit-peer-session ! template peer-session loop  update-source Loopback1  inherit peer-session password→继承password的会话模板 exit-peer-session ! template peer-session password  password cisco123  inherit peer-session AS→继承AS的会话模板 exit-peer-session ! bgp log-neighbor-changes neighbor 4.4.4.4 inherit peer-session loop</code></pre><h4 id="（3）策略模板"><a href="#（3）策略模板" class="headerlink" title="（3）策略模板"></a>（3）策略模板</h4><pre class=" language-YAML"><code class="language-YAML">loc         →hop→routerouter bgp 200 template peer-policy loc  route-map zwh in exit-peer-policy ! template peer-policy hop  next-hop-self  inherit peer-policy route 1 exit-peer-policy ! template peer-policy route  default-originate exit-peer-policy neighbor 4.4.4.4 inherit peer-policy route neighbor 125.125.125.2 inherit peer-policy loc</code></pre><h2 id="十五、BGP的拓展"><a href="#十五、BGP的拓展" class="headerlink" title="十五、BGP的拓展"></a>十五、BGP的拓展</h2><h4 id="（1）4字节的AS号"><a href="#（1）4字节的AS号" class="headerlink" title="（1）4字节的AS号"></a>（1）4字节的AS号</h4><p>范围： &lt;1-4294967295&gt;</p><h4 id="（2）local-as"><a href="#（2）local-as" class="headerlink" title="（2）local-as"></a>（2）local-as</h4><p>①作用：AS号的平滑迁移<br>②配置：neighbor 126.126.126.1 local-as 500→指定邻居126.126.126.1本地旧AS号为500<br>③新的和旧的AS会同时传递出去<br>R12(config-router)#neighbor 125.125.125.1 local-as 500 no-prepend replace-as→删除私有AS</p><h4 id="（3）移除私有AS号"><a href="#（3）移除私有AS号" class="headerlink" title="（3）移除私有AS号"></a>（3）移除私有AS号</h4><p>R12(config-router)#neighbor 125.125.125.1 remove-private-as →移除私有AS号</p><h4 id="（4）BFD双向转发检测"><a href="#（4）BFD双向转发检测" class="headerlink" title="（4）BFD双向转发检测"></a>（4）BFD双向转发检测</h4><p>①实现毫秒级的故障检测<br>②配置</p><pre class=" language-YAML"><code class="language-YAML">R7(config)#int e0/1R7(config-if)#bfd interval 100 min_rx 50 multiplier 3R7(config-router)#neighbor 8.8.8.8 fall-over bfd </code></pre><h4 id="（5）BGP的路由限制"><a href="#（5）BGP的路由限制" class="headerlink" title="（5）BGP的路由限制"></a>（5）BGP的路由限制</h4><p>①作用：限制从邻居学习的路由数量<br>②配置<br>R7(config-router)#neighbor 8.8.8.8 maximum-prefix 4 75 restart 1 →从邻居学习最多4条，学习到3条产生告警信息，超过4条邻居down，再1分钟后重新建立BGP连接</p><h4 id="（6）BGP的扫描"><a href="#（6）BGP的扫描" class="headerlink" title="（6）BGP的扫描"></a>（6）BGP的扫描</h4><pre class=" language-YAML"><code class="language-YAML">R7(config-router)#bgp scan-time ?  <5-60>  Scanner interval (seconds)</code></pre><h4 id="（7）allowas-in"><a href="#（7）allowas-in" class="headerlink" title="（7）allowas-in"></a>（7）allowas-in</h4><p>①作用：打破EBGP的水平分割<br>②配置：</p><pre class=" language-YAML"><code class="language-YAML">R12(config-router)#neighbor 125.125.125.1 allowas-in 3</code></pre><p>→指定从这个邻居传递出的路由中，AS-PATH的AS号可以重复出现3次</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 路由协议 </tag>
            
            <tag> CCIE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IGP</title>
      <link href="/2023/01/08/igp/"/>
      <url>/2023/01/08/igp/</url>
      
        <content type="html"><![CDATA[<h1 id="IGP-内部网关协议"><a href="#IGP-内部网关协议" class="headerlink" title="IGP  内部网关协议"></a>IGP  内部网关协议</h1><h2 id="一、路由重分布"><a href="#一、路由重分布" class="headerlink" title="一、路由重分布"></a>一、路由重分布</h2><p>背景：公司合并、产商设备的兼容性问题，导致局域网不能互联，各个路由协议所运行的算法不兼容<br>解决方法→路由重分布：不同协议间的路由学习</p><h2 id="二、重分布的对象"><a href="#二、重分布的对象" class="headerlink" title="二、重分布的对象"></a>二、重分布的对象</h2><p>1、直连<br>2、静态路由<br>3、其他动态路由协议</p><h2 id="三、重分布的类型"><a href="#三、重分布的类型" class="headerlink" title="三、重分布的类型"></a>三、重分布的类型</h2><p>1、单点单向→默认路由<br>2、单点双向<br>3、双点单向<br>4、双点双向</p><h2 id="四、重分布产生的网络问题"><a href="#四、重分布产生的网络问题" class="headerlink" title="四、重分布产生的网络问题"></a>四、重分布产生的网络问题</h2><p>1、次优路径<br>2、环路</p><h2 id="五、初始度量值（种子度量值）"><a href="#五、初始度量值（种子度量值）" class="headerlink" title="五、初始度量值（种子度量值）"></a>五、初始度量值（种子度量值）</h2><p>1、RIP和EIGRP的初始度量值为无穷大<br>2、OSPF的初始度量值为20</p><h2 id="六、配置"><a href="#六、配置" class="headerlink" title="六、配置"></a>六、配置</h2><h4 id="1、RIP"><a href="#1、RIP" class="headerlink" title="1、RIP"></a>1、RIP</h4><pre class=" language-YAML"><code class="language-YAML">R3(config)#router ripR3(config-router)#redistribute ospf 110 metric 3R3(config-router)#redistribute eigrp 90 metric 1metric 1：代表的是将其他协议的初始度量值设置为1</code></pre><h4 id="2、OSPF"><a href="#2、OSPF" class="headerlink" title="2、OSPF"></a>2、OSPF</h4><pre class=" language-YAML"><code class="language-YAML">R3(config)#router ospf 110R3(config-router)#redistribute static subnetsR3(config-router)#redistribute rip subnets subnets ：重分布详细的子网信息R3(config-router)#redistribute eigrp 90 subnets metric 30 metric-type 1将EIGRP的外部通告进OSPF区域时，初始度量值更改为30，类型为OE1</code></pre><h4 id="3、EIGRP"><a href="#3、EIGRP" class="headerlink" title="3、EIGRP"></a>3、EIGRP</h4><pre class=" language-YAML"><code class="language-YAML">R3(config-router)#redistribute rip metric 10000 1 1 1 150010000（带宽）1 （延迟）1（可靠性）1（负载）1（MTU）D EX     23.23.23.0 [170/307456] via 89.89.89.1, 00:00:03, Ethernet0/0D EX：代表的是EIGRP的外部路由直连：0静态：1D：90OSPF：110IS-IS：115RIP：120D EX：170</code></pre><h4 id="4、IS-IS"><a href="#4、IS-IS" class="headerlink" title="4、IS-IS"></a>4、IS-IS</h4><pre class=" language-YAML"><code class="language-YAML">R7(config)#router ospf 110R7(config-router)#redistribute isis level-2 subnets其他协议重分布ISIS时，默认重分布的是L2的路由R7(config-router)#redistribute isis ?  level-1      IS-IS level-1 routes only  level-1-2    IS-IS level-1 and level-2 routes  level-2      IS-IS level-2 routes only→默认R7(config-router)#redistribute ospf 110 level-2</code></pre><p>ISIS不通告直连</p><h2 id="七、管理距离"><a href="#七、管理距离" class="headerlink" title="七、管理距离"></a>七、管理距离</h2><h4 id="1、更改全局AD"><a href="#1、更改全局AD" class="headerlink" title="1、更改全局AD"></a>1、更改全局AD</h4><h4 id="2、更改特点源的路由AD"><a href="#2、更改特点源的路由AD" class="headerlink" title="2、更改特点源的路由AD"></a>2、更改特点源的路由AD</h4><h4 id="3、更改特定路由的AD→需要使用ACL"><a href="#3、更改特定路由的AD→需要使用ACL" class="headerlink" title="3、更改特定路由的AD→需要使用ACL"></a>3、更改特定路由的AD→需要使用ACL</h4><p>更改只具有本地意义→影响的本地数据包的转发</p><h4 id="①-RIP"><a href="#①-RIP" class="headerlink" title="①.RIP"></a>①.RIP</h4><pre class=" language-YAML"><code class="language-YAML">①R3(config-router)#distance 119       //更改RIP的AD值为119②R2(config-router)#distance 118 12.12.12.1 0.0.0.0   //将12.12.12.1通告的路由AD值更改为118③R2(config)#access-list 1 permit 172.16.1.0 0.0.0.255R2(config-router)#distance 117 12.12.12.1 0.0.0.0 1通过ACL匹配特定网段，在distance上调用</code></pre><h4 id="②-EIGRP：内部和外部"><a href="#②-EIGRP：内部和外部" class="headerlink" title="②.EIGRP：内部和外部"></a>②.EIGRP：内部和外部</h4><pre class=" language-YAML"><code class="language-YAML">①R8(config-router)#distance eigrp 91 171  //将内部AD值改为91，外部改为171②R8(config-router)#distance 92 89.89.89.2 0.0.0.0  //更改只能作用在内部的EIGRP③R8(config)#access-list 1 permit 99.99.99.0 0.0.0.255R8(config-router)#distance 93 89.89.89.2 0.0.0.0 1</code></pre><h4 id="③-OSPF：通告者"><a href="#③-OSPF：通告者" class="headerlink" title="③.OSPF：通告者"></a>③.OSPF：通告者</h4><pre class=" language-YAML"><code class="language-YAML">①R4(config-router)#distance ospf external 111 inter-area 112 intra-area 113external 111：更改外部AD为111inter-area 112：更改区域间AD为112intra-area 113：更改区域内AD为113②R4(config-router)#distance 114 67.67.67.1 0.0.0.0注意：如果需要更改的路由是ABR/ASBR通告的，则在源IP上配置的是通告者的RID③R4(config)#access-list 1 permit 172.16.3.0 0.0.0.255R4(config-router)#distance 115 38.38.38.1 0.0.0.0 1   //注意：通告者</code></pre><h2 id="八、ACL的特殊应用"><a href="#八、ACL的特殊应用" class="headerlink" title="八、ACL的特殊应用"></a>八、ACL的特殊应用</h2><h4 id="1、匹配A类："><a href="#1、匹配A类：" class="headerlink" title="1、匹配A类："></a>1、匹配A类：</h4><h2 id="什么是A类地址？第一个字节的第一个二进制是0，其余无所谓YAML-0XXXXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX-01111111-255-255-255-access-list-1-permit-0-0-0-0-127-255-255-255-2、匹配B类：YAML-10XXXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX-00111111-255-255-255-access-list-1-permit-128-0-0-0-63-255-255-255-3、匹配C类：-96-96-96-YAML110XXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX00011111-255-255-255access-list-1-permit-192-0-0-0-31-255-255-255"><a href="#什么是A类地址？第一个字节的第一个二进制是0，其余无所谓YAML-0XXXXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX-01111111-255-255-255-access-list-1-permit-0-0-0-0-127-255-255-255-2、匹配B类：YAML-10XXXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX-00111111-255-255-255-access-list-1-permit-128-0-0-0-63-255-255-255-3、匹配C类：-96-96-96-YAML110XXXXX-XXXXXXXX-XXXXXXXX-XXXXXXXX00011111-255-255-255access-list-1-permit-192-0-0-0-31-255-255-255" class="headerlink" title="什么是A类地址？第一个字节的第一个二进制是0，其余无所谓YAML 0XXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX 01111111.255.255.255 access-list 1 permit 0.0.0.0 127.255.255.255 #### 2、匹配B类：YAML 10XXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX 00111111.255.255.255 access-list 1 permit 128.0.0.0 63.255.255.255 #### 3、匹配C类：```YAML110XXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX00011111.255.255.255access-list 1 permit 192.0.0.0 31.255.255.255"></a>什么是A类地址？第一个字节的第一个二进制是0，其余无所谓<br><code>YAML 0XXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX 01111111.255.255.255 access-list 1 permit 0.0.0.0 127.255.255.255 </code><br>#### 2、匹配B类：<br><code>YAML 10XXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX 00111111.255.255.255 access-list 1 permit 128.0.0.0 63.255.255.255 </code><br>#### 3、匹配C类：<br>```YAML<br>110XXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX<br>00011111.255.255.255<br>access-list 1 permit 192.0.0.0 31.255.255.255</h2><p>10.1.1.0/24  10.1.2.0/24  10.1.3.0/24 10.1.4.0/24<br>匹配奇数：10.1.1.0/24 、10.1.3.0/24<br>access-list 1 permit 10.1.1.0 0.0.254.255<br>匹配偶数：10.1.2.0/24、10.1.4.0/24<br>access-list 1 permit 10.1.0.0 0.0.254.255</p><pre><code>## 九、分发列表-----distribute-list作用：用来过滤路由→ACL过滤的方向有两种：in/out分发调用的位置：接口/协议#### 1、RIP/EIGRP```YAMLeq1:R2(config)#access-list 4 deny 172.16.1.0 0.0.0.255       R2(config)#access-list 4 permit any       R2(config-router)#distribute-list 4 in e0/0       在e0/0的进方向过滤172.16.1.0，现象是路由表此条目消失</code></pre><p>如果是out方向：</p><pre class=" language-YAML"><code class="language-YAML">R1(config-router)#distribute-list 1 out e0/0在e0/0的出方向过滤172.16.1.0，现象是本地路由表此条目存在，邻居消失②OSPFR4(config)#access-list 2 deny 172.168.2.0 0.0.0.255R4(config)#access-list 2 permit any  R4(config)#router ospf 110R4(config-router)#distribute-list 2 in e0/0</code></pre><p>现象：本地没有172.168.2.0，但是邻居路由表有此条路由<br>注意：分发列表过滤的是路由对LSA没有作用，OSPF邻居通告的是LSA，是通过SPF自己产生路由，分发列表in方向作用在拓扑表将要把路由加入路由表的过程中。分发列表在OSPF中调用接口out方向没有任何意义。</p><h4 id="2、OSPF中out方向—-ASBR上使用"><a href="#2、OSPF中out方向—-ASBR上使用" class="headerlink" title="2、OSPF中out方向—-ASBR上使用"></a>2、OSPF中out方向—-ASBR上使用</h4><pre class=" language-YAML"><code class="language-YAML">R3(config)#access-list 1 deny 172.168.2.0 0.0.0.255R3(config)#access-list 1 permit any R3(config)#router ospf 110R3(config-router)#distribute-list 1 out rip</code></pre><p>将RIP的ACL1的条目重分布进OSPF中过滤掉</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 路由协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BGP</title>
      <link href="/2023/01/08/bgp/"/>
      <url>/2023/01/08/bgp/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP-边界网关协议"><a href="#BGP-边界网关协议" class="headerlink" title="BGP  边界网关协议"></a>BGP  边界网关协议</h1><h2 id="一、IGP和EGP的区别"><a href="#一、IGP和EGP的区别" class="headerlink" title="一、IGP和EGP的区别"></a>一、IGP和EGP的区别</h2><p>IGP：内部网关协议，实现<strong>AS内</strong>的路由发现和学习<br>EGP：外部网关协议，实现<strong>AS间</strong>的路由传递<br>BGP：边界网关协议，属于<strong>距离矢量路由协议</strong><br>AS：范围是1-65535 私有的范围：64512-65535</p><h2 id="二、BGP的特征"><a href="#二、BGP的特征" class="headerlink" title="二、BGP的特征"></a>二、BGP的特征</h2><h4 id="1、距离矢量路由协议"><a href="#1、距离矢量路由协议" class="headerlink" title="1、距离矢量路由协议"></a>1、距离矢量路由协议</h4><h4 id="2、基于TCP端口179"><a href="#2、基于TCP端口179" class="headerlink" title="2、基于TCP端口179"></a>2、基于TCP端口179</h4><h4 id="3、keepalive的hellotime是60S，deadtime是180S"><a href="#3、keepalive的hellotime是60S，deadtime是180S" class="headerlink" title="3、keepalive的hellotime是60S，deadtime是180S"></a>3、keepalive的hellotime是60S，deadtime是180S</h4><h4 id="4、选路不考虑链路的带宽延迟等，依靠的是路由携带的属性"><a href="#4、选路不考虑链路的带宽延迟等，依靠的是路由携带的属性" class="headerlink" title="4、选路不考虑链路的带宽延迟等，依靠的是路由携带的属性"></a>4、选路不考虑链路的带宽延迟等，依靠的是路由携带的属性</h4><h4 id="5、主要用于大型网络环境"><a href="#5、主要用于大型网络环境" class="headerlink" title="5、主要用于大型网络环境"></a>5、主要用于大型网络环境</h4><h2 id="三、BGP的对等体（邻居）"><a href="#三、BGP的对等体（邻居）" class="headerlink" title="三、BGP的对等体（邻居）"></a>三、BGP的对等体（邻居）</h2><h4 id="1、IBGP："><a href="#1、IBGP：" class="headerlink" title="1、IBGP："></a>1、IBGP：</h4><p>邻居与自己处于相同AS的邻居关系</p><h4 id="2、EBGP："><a href="#2、EBGP：" class="headerlink" title="2、EBGP："></a>2、EBGP：</h4><p>邻居与自己处于不同AS的邻居关系</p><h2 id="四、BGP的报文"><a href="#四、BGP的报文" class="headerlink" title="四、BGP的报文"></a>四、BGP的报文</h2><h4 id="1、open："><a href="#1、open：" class="headerlink" title="1、open："></a>1、open：</h4><p>建立邻居</p><h4 id="2、keepalive："><a href="#2、keepalive：" class="headerlink" title="2、keepalive："></a>2、keepalive：</h4><p>维持邻居关系，确认</p><h4 id="3、update："><a href="#3、update：" class="headerlink" title="3、update："></a>3、update：</h4><p>路由的更新</p><h4 id="4、notification："><a href="#4、notification：" class="headerlink" title="4、notification："></a>4、notification：</h4><p>检测到BGP的错误状态连接</p><h2 id="五、BGP的状态"><a href="#五、BGP的状态" class="headerlink" title="五、BGP的状态"></a>五、BGP的状态</h2><h4 id="1、idle"><a href="#1、idle" class="headerlink" title="1、idle:"></a>1、idle:</h4><p>查找邻居的路由</p><h4 id="2、connect："><a href="#2、connect：" class="headerlink" title="2、connect："></a>2、connect：</h4><p>TCP三次握手建立成功</p><h4 id="3、open-sent："><a href="#3、open-sent：" class="headerlink" title="3、open sent："></a>3、open sent：</h4><p>建立BGP的邻居</p><h4 id="4、Open-confirm："><a href="#4、Open-confirm：" class="headerlink" title="4、Open confirm："></a>4、Open confirm：</h4><p>建立BGP会话参数协议</p><h4 id="5、establish："><a href="#5、establish：" class="headerlink" title="5、establish："></a>5、establish：</h4><p>路由更新</p><h4 id="6、active："><a href="#6、active：" class="headerlink" title="6、active："></a>6、active：</h4><p>TCP三次握手失败、AS号不一致、邻居IP地址不一致</p><h2 id="六、BGP的配置"><a href="#六、BGP的配置" class="headerlink" title="六、BGP的配置"></a>六、BGP的配置</h2><pre class=" language-YAML"><code class="language-YAML">R2(config)#router bgp 234R2(config-router)#bgp router-id 2.2.2.2R2(config-router)#neighbor 12.12.12.1 remote-as 100      //建立EBGP邻居，前提4.4.4.4可达R2(config-router)#neighbor 4.4.4.4 remote-as 234          //建立IBGP邻居，采用物理接口R2(config-router)#neighbor 4.4.4.4 update-source loopback 1//将更新源改为环回口R2(config-router)#neighbor 4.4.4.4 next-hop-self     //将下一跳改为自己R2(config-router)#network 2.2.2.0 mask 255.255.255.0  //精确通告（通告的是路由表条目）R2(config-router)#neighbor 1.1.1.1 ebgp-multihop ?    //更改EBGP的TTL值  <1-255>  maximum hop countR1#show ip bgp summary→查看邻居R1#show ip bgp→拓扑表>：代表的是加入路由表的下一跳m：多路径i：前i代表的该条目是IBGP通告R2#show ip route bgp→路由表B        1.1.1.0 [20/0] via 12.12.12.1, 01:09:19    与通告者的邻居关系是EBGP，AD为20B        5.5.5.0 [200/0] via 4.4.4.4, 00:28:02        与通告者的邻居关系是IBGP，AD为200</code></pre><h2 id="七、BGP的更新源问题"><a href="#七、BGP的更新源问题" class="headerlink" title="七、BGP的更新源问题"></a>七、BGP的更新源问题</h2><p>默认情况下，BGP的更新源是采用物理接口的IP地址，如果neighbor 指定的IP与更新源IP不一致，BGP处于idle状态</p><h2 id="八、BGP的下一跳问题"><a href="#八、BGP的下一跳问题" class="headerlink" title="八、BGP的下一跳问题"></a>八、BGP的下一跳问题</h2><p>收到来自EBGP的路由信息，下一跳为邻居的出接口IP，此时通告给IBGP对等体时，不会更改下一跳IP，那么IBGP邻居收到这条路由十，因为下一跳不可达不会添加进路由表也不会通告给任何对等体</p><h2 id="九、BGP的路由黑洞"><a href="#九、BGP的路由黑洞" class="headerlink" title="九、BGP的路由黑洞"></a>九、BGP的路由黑洞</h2><p>原因：由于IBGP的邻居是逻辑相连，可能出现内部路由器没有运行BGP导致没有相应的BGP条目，出现丢包<br>解决方法：全互联</p><h2 id="十、BGP的环路抑制"><a href="#十、BGP的环路抑制" class="headerlink" title="十、BGP的环路抑制"></a>十、BGP的环路抑制</h2><pre class=" language-YAML"><code class="language-YAML">①IBGP的水平分割：收到来自IBGP对等体的路由，不会通告给IBGP对等体②EBGP的水平分割：经过一个AS区域会记录AS号，如果要进入的AS与自己的AS_path路径中重复，则不学习</code></pre><h2 id="十一、BGP的刷新"><a href="#十一、BGP的刷新" class="headerlink" title="十一、BGP的刷新"></a>十一、BGP的刷新</h2><pre class=" language-YAML"><code class="language-YAML">①R2#clear ip bgp *   重置邻居关系（硬清）②R2#clear ip bgp * soft    重置策略（软清）</code></pre><h2 id="十二、BGP的属性"><a href="#十二、BGP的属性" class="headerlink" title="十二、BGP的属性"></a>十二、BGP的属性</h2><h4 id="1、属性的分类"><a href="#1、属性的分类" class="headerlink" title="1、属性的分类"></a>1、属性的分类</h4><h6 id="1-1、公认必遵：数据包必须携带，厂商都识别"><a href="#1-1、公认必遵：数据包必须携带，厂商都识别" class="headerlink" title="1.1、公认必遵：数据包必须携带，厂商都识别"></a>1.1、公认必遵：数据包必须携带，厂商都识别</h6><h6 id="1-2、公认可选：数据包可以不携带，厂商都识别"><a href="#1-2、公认可选：数据包可以不携带，厂商都识别" class="headerlink" title="1.2、公认可选：数据包可以不携带，厂商都识别"></a>1.2、公认可选：数据包可以不携带，厂商都识别</h6><h6 id="1-3、可选传递：数据包可以不携带，可以传递给其他对等体"><a href="#1-3、可选传递：数据包可以不携带，可以传递给其他对等体" class="headerlink" title="1.3、可选传递：数据包可以不携带，可以传递给其他对等体"></a>1.3、可选传递：数据包可以不携带，可以传递给其他对等体</h6><h6 id="1-4、可选非传递：数据包可以不携带，不可以传递给其他对等体"><a href="#1-4、可选非传递：数据包可以不携带，不可以传递给其他对等体" class="headerlink" title="1.4、可选非传递：数据包可以不携带，不可以传递给其他对等体"></a>1.4、可选非传递：数据包可以不携带，不可以传递给其他对等体</h6><h4 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h4><h6 id="2-1、weight：权重—–思科私有（华为的协议首选值）"><a href="#2-1、weight：权重—–思科私有（华为的协议首选值）" class="headerlink" title="2.1、weight：权重—–思科私有（华为的协议首选值）"></a>2.1、weight：权重—–思科私有（华为的协议首选值）</h6><p>特点：选择去往目标网段的出接口，只对本地生效，不传递给其他对等体，<strong>本地</strong>network的<strong>权重</strong>为<strong>32768</strong>，<strong>接收</strong>的路由<strong>权重默认为0</strong>，<strong>权重越大越优</strong></p><pre class=" language-YAML"><code class="language-YAML">R1(config-router)#neighbor 12.12.12.2 weight 10access-list 1 permit 172.16.1.0 0.0.0.255route-map weight permit 10 match ip address 1 set weight 20route-map weight permit 20neighbor 12.12.12.2 route-map weight in</code></pre><h6 id="2-2、LocPrf：本地优先级，选择离开本地AS的出口，默认IBGP的优先级为100，经过EBGP时，会剥离这个属性，越大越优"><a href="#2-2、LocPrf：本地优先级，选择离开本地AS的出口，默认IBGP的优先级为100，经过EBGP时，会剥离这个属性，越大越优" class="headerlink" title="2.2、LocPrf：本地优先级，选择离开本地AS的出口，默认IBGP的优先级为100，经过EBGP时，会剥离这个属性，越大越优"></a>2.2、LocPrf：本地优先级，选择离开本地AS的出口，默认IBGP的优先级为100，经过EBGP时，会剥离这个属性，越大越优</h6><pre class=" language-YAML"><code class="language-YAML">access-list 2 permit 172.16.2.0 0.0.0.255route-map loc permit 10 match ip address 2 set local-preference 200route-map loc permit 20neighbor 14.14.14.2 route-map loc in</code></pre><h6 id="2-3、下一跳—指向下一个AS的入口IP地址"><a href="#2-3、下一跳—指向下一个AS的入口IP地址" class="headerlink" title="2.3、下一跳—指向下一个AS的入口IP地址"></a>2.3、下一跳—指向下一个AS的入口IP地址</h6><p>如果是0.0.0.0代表的本地产生的网段，路由是AS外部且来自EBGP对等体，下一跳为EBGP邻居的接口IP，将此条路由发送给IBGP时，不会更改下一跳</p><h6 id="2-4、AS-PATH"><a href="#2-4、AS-PATH" class="headerlink" title="2.4、AS_PATH"></a>2.4、AS_PATH</h6><p>a.会记录经过的AS号，添加进AS_PATH<br>b.选路通过AS_PATH中个数少的<br>c.不会进入AS_PATH中已经出现的AS<br>d.AS号的最右边可以代表源AS</p><pre class=" language-YAML"><code class="language-YAML">access-list 1 permit 192.168.1.0 0.0.0.255route-map as permit 10 match ip address 1 set as-path prepend 100 200route-map as permit 20 neighbor 12.12.12.1 route-map as in</code></pre><h6 id="2-5、Origin-起源——通过什么方式进入BGP的"><a href="#2-5、Origin-起源——通过什么方式进入BGP的" class="headerlink" title="2.5、Origin  起源——通过什么方式进入BGP的"></a>2.5、Origin  起源——通过什么方式进入BGP的</h6><pre class=" language-YAML"><code class="language-YAML">Origin codes: i - IGP, e - EGP, ? - incompletei：后代表的是通过network的方式进入BGPe：通过EBP的方式进入BGP?：代表通告重分布进BGP优先级：i>e>?access-list 2 permit 192.168.2.0 0.0.0.255route-map or permit 10 match ip address 2 set origin incompleteroute-map or permit 20 neighbor 12.12.12.1 route-map or in</code></pre><h6 id="2-6、MED-度量值（可选非传递）"><a href="#2-6、MED-度量值（可选非传递）" class="headerlink" title="2.6、MED  度量值（可选非传递）"></a>2.6、MED  度量值（可选非传递）</h6><p>用于通告EBGP对等进入本地AS的开销，默认情况下，EBGP只会比较同一个AS的开销，比较不同AS开销需要启用→<strong>bgp always-compare-med</strong></p><pre class=" language-YAML"><code class="language-YAML">access-list 1 permit 172.16.2.0 0.0.0.255route-map med permit 10 match ip address 1 set metric 50route-map med permit 20 neighbor 14.14.14.1 route-map med out</code></pre><h6 id="2-7、优选EBGP，次选IBGP"><a href="#2-7、优选EBGP，次选IBGP" class="headerlink" title="2.7、优选EBGP，次选IBGP"></a>2.7、优选EBGP，次选IBGP</h6><h6 id="2-8、选择最近的IGP邻居"><a href="#2-8、选择最近的IGP邻居" class="headerlink" title="2.8、选择最近的IGP邻居"></a>2.8、选择最近的IGP邻居</h6><h6 id="2-9、选择最老的EBGP邻居（路由时间最长）"><a href="#2-9、选择最老的EBGP邻居（路由时间最长）" class="headerlink" title="2.9、选择最老的EBGP邻居（路由时间最长）"></a>2.9、选择最老的EBGP邻居（路由时间最长）</h6><h6 id="2-10、选择邻居最低的BGP的ID"><a href="#2-10、选择邻居最低的BGP的ID" class="headerlink" title="2.10、选择邻居最低的BGP的ID"></a>2.10、选择邻居最低的BGP的ID</h6><h6 id="2-11、选择最低的邻居IP"><a href="#2-11、选择最低的邻居IP" class="headerlink" title="2.11、选择最低的邻居IP"></a>2.11、选择最低的邻居IP</h6><p>口诀：PLLAOMEN</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 路由协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIGRP</title>
      <link href="/2023/01/08/eigrp/"/>
      <url>/2023/01/08/eigrp/</url>
      
        <content type="html"><![CDATA[<h1 id="EIGRP-增强型内部网关协议"><a href="#EIGRP-增强型内部网关协议" class="headerlink" title="EIGRP  增强型内部网关协议"></a>EIGRP  增强型内部网关协议</h1><h2 id="一、EIGRP的特点"><a href="#一、EIGRP的特点" class="headerlink" title="一、EIGRP的特点"></a>一、EIGRP的特点</h2><p>1.高级距离矢量路由协议→路由表<br>2.早期是思科私有协议<br>3.组播和单播取代广播地址→<strong>224.0.0.10</strong><br>如果组播发送的路由信息，有一个邻居没有回应数据包，此时更新源就会单播发送路由信息，超过16次就不会再单播更新<br>4.支持多种网络层协议→IP  IPX  APPLETALK<br>5.<strong>100%无环路</strong>→DUAL算法<br>6.快速收敛→网络环境从设备初始化到全局网络稳定<br>EIGRP是协议中收敛最快→HELLO（5S）<br>7.部分更新→第一次是完整的更新，之后就是部分更新<br>8.网络设计灵活→相对简单<br>9.<strong>支持VLSM</strong>（无类路由）→通告携带子网掩码<br>10.等价和不等价 （默认不启用）→等价负载均衡默认是4条路径，最大可以16条<br>11.可以在任意点进行手工汇总<br>12.综合度量值→路径选择的参考因素（5个K）<br>13.基于IP协议号<strong>88</strong>的<strong>传输层协议</strong></p><h2 id="二、EIGRP的五个报文"><a href="#二、EIGRP的五个报文" class="headerlink" title="二、EIGRP的五个报文"></a>二、EIGRP的五个报文</h2><h4 id="1、HELLO："><a href="#1、HELLO：" class="headerlink" title="1、HELLO："></a>1、HELLO：</h4><p>   用来建立和维持邻居关系→参数必须一致</p><h4 id="2、update："><a href="#2、update：" class="headerlink" title="2、update："></a>2、update：</h4><p>   路由更新包</p><h4 id="3、query："><a href="#3、query：" class="headerlink" title="3、query："></a>3、query：</h4><p>   问题路由的查询</p><h4 id="4、reply："><a href="#4、reply：" class="headerlink" title="4、reply："></a>4、reply：</h4><p>   问题路由的回应</p><h4 id="5、ack："><a href="#5、ack：" class="headerlink" title="5、ack："></a>5、ack：</h4><p>   用来确认update、query、reply（确认号非0的hello包代表ack包）<br>RTP：可靠传输协议→两个序列号（序列号以及确认号）</p><h2 id="三、EIGRP的三张表"><a href="#三、EIGRP的三张表" class="headerlink" title="三、EIGRP的三张表"></a>三、EIGRP的三张表</h2><h4 id="1、邻居表："><a href="#1、邻居表：" class="headerlink" title="1、邻居表："></a>1、邻居表：</h4><p>存放邻居的相关信息→R3#show ip eigrp neighbors<br>    SRTT（往返的平滑时间）：发送书包到邻居接受并接受到邻居回应数据包的时间<br>    RTO（重传超时）：发送单播更新的间隔时间<br>    Q CNT：（重传队列）<br>    Seq num（序列号）：RTP序列号</p><h4 id="2、拓扑表："><a href="#2、拓扑表：" class="headerlink" title="2、拓扑表："></a>2、拓扑表：</h4><p>存放所有的路由信息的度量值→R3#show ip eigrp topology （ all-links ）<br>    a. P - Passive（被动状态）指代该路由是稳定的（DUAL算法运行后）<br>    b.A - Active（活跃状态）指代该路由还在进行DUAL算法</p><h4 id="3、路由表："><a href="#3、路由表：" class="headerlink" title="3、路由表："></a>3、路由表：</h4><p>存放最优路径的路由→R3#show ip route eigrp</p><h2 id="四、EIGRP的度量值计算"><a href="#四、EIGRP的度量值计算" class="headerlink" title="四、EIGRP的度量值计算"></a>四、EIGRP的度量值计算</h2><h4 id="1、带宽"><a href="#1、带宽" class="headerlink" title="1、带宽"></a>1、带宽</h4><h4 id="2、负载"><a href="#2、负载" class="headerlink" title="2、负载"></a>2、负载</h4><h4 id="3、延迟"><a href="#3、延迟" class="headerlink" title="3、延迟"></a>3、延迟</h4><h4 id="4、可靠性：1-255"><a href="#4、可靠性：1-255" class="headerlink" title="4、可靠性：1-255"></a>4、可靠性：1-255</h4><h4 id="5、MTU：最大传输单元-1500"><a href="#5、MTU：最大传输单元-1500" class="headerlink" title="5、MTU：最大传输单元 1500"></a>5、MTU：最大传输单元 1500</h4><p>计算公式：计算只与带宽和延迟有关<br>度量值=（10^7/带宽+延迟和/10）*256<br>a.数据发送的出接口的带宽最小以及延迟和<br>b.路由学习的入接口的带宽最小以及延迟和</p><h2 id="五、EIGRP的DUAL算法"><a href="#五、EIGRP的DUAL算法" class="headerlink" title="五、EIGRP的DUAL算法"></a>五、EIGRP的DUAL算法</h2><h4 id="1、DUAL算法的术语"><a href="#1、DUAL算法的术语" class="headerlink" title="1、DUAL算法的术语"></a>1、DUAL算法的术语</h4><pre class=" language-YAML"><code class="language-YAML">a.后继路由器（S）：最优路径的下一跳b.可行后继路由器（FS）：如果FC成立，则在拓扑表中添加次优路径c.可行条件（FC）：FD1>AD2d.可行距离（FD）：最优路径的开销e.通告距离（AD）：后继路由器到达目的的开销</code></pre><h4 id="2、不负载均衡的实施（默认是不启用）"><a href="#2、不负载均衡的实施（默认是不启用）" class="headerlink" title="2、不负载均衡的实施（默认是不启用）"></a>2、不负载均衡的实施（默认是不启用）</h4><pre class=" language-YAML"><code class="language-YAML">a.FD1>AD2假如无法满足，可以通过修改接口的带宽和延迟，使FC成立b.FD1*V>FD2→默认variance值是1数据包发送的比例与链路开销成反比→R1#show ip route 34.34.34.0</code></pre><h2 id="六、EIGRP的身份验证"><a href="#六、EIGRP的身份验证" class="headerlink" title="六、EIGRP的身份验证"></a>六、EIGRP的身份验证</h2><h4 id="1-作用：防止恶意更新源的恶意路由"><a href="#1-作用：防止恶意更新源的恶意路由" class="headerlink" title="1.作用：防止恶意更新源的恶意路由"></a>1.作用：防止恶意更新源的恶意路由</h4><h4 id="2-部署身份验证：使用MD5的加密方式"><a href="#2-部署身份验证：使用MD5的加密方式" class="headerlink" title="2.部署身份验证：使用MD5的加密方式"></a>2.部署身份验证：使用MD5的加密方式</h4><pre class=" language-YAML"><code class="language-YAML">a.接口下启用EIGRP的MD5方式验证   R2(config)#int e0/1   R2(config-if)#ip authentication mode eigrp 90 md5b. 调用名称为ccnp的钥匙串   R2(config-if)#ip authentication key-chain eigrp 90 ccnpc.创建钥匙串以及钥匙，密码为cisco123   R2(config)#key chain ccnp   R2(config-keychain)#key 1   R2(config-keychain-key)# key-string cisco123   R2(config-keychain-key)# accept-lifetime 10:00:00 May 1 2020 10:00:00 May 31 2020   R2(config-keychain-key)# send-lifetime 10:00:00 May 1 2020 10:00:00 May 31 2020注意：钥匙的序列号以及密码保持一致d.查看命令   R2#show key chain </code></pre><h2 id="七、EIGRP的路由汇总"><a href="#七、EIGRP的路由汇总" class="headerlink" title="七、EIGRP的路由汇总"></a>七、EIGRP的路由汇总</h2><h4 id="1-自动汇总："><a href="#1-自动汇总：" class="headerlink" title="1.自动汇总："></a>1.自动汇总：</h4><p>默认打开，建议在配置时候关闭，防止网段规划不合理所造成的丢包现象→<br>R2(config-router)#no auto-summary </p><h4 id="2-手动汇总"><a href="#2-手动汇总" class="headerlink" title="2.手动汇总"></a>2.手动汇总</h4><pre class=" language-YAML"><code class="language-YAML">2.1作用：精简路由表的条目，汇总的本地会产生一条下一跳指向null0的路由→防止环路，抑制查询包2.2配置   R4(config)#int e0/0   R4(config-if)#ip summary-address eigrp 90 172.16.0.0/162.3特点：汇总路由的度量值=明细路由的最小度量值，明细条目都不存在，汇总条目消失   </code></pre><h2 id="八、EIGRP的默认路由下发"><a href="#八、EIGRP的默认路由下发" class="headerlink" title="八、EIGRP的默认路由下发"></a>八、EIGRP的默认路由下发</h2><h4 id="1、作用：边界网关设备主动下发默认路由，使得内网IP能够访问出接口的IP"><a href="#1、作用：边界网关设备主动下发默认路由，使得内网IP能够访问出接口的IP" class="headerlink" title="1、作用：边界网关设备主动下发默认路由，使得内网IP能够访问出接口的IP"></a>1、作用：边界网关设备主动下发默认路由，使得内网IP能够访问出接口的IP</h4><h4 id="2、下发的方式"><a href="#2、下发的方式" class="headerlink" title="2、下发的方式"></a>2、下发的方式</h4><pre class=" language-YAML"><code class="language-YAML">2.1：汇总路由     →R4(config-if)#ip summary-address eigrp 90 0.0.0.0/0   本地产生null0的汇总路由，会丢包，本地再写一条默认路由；如果是运营商下发的默认路由的AD值大于5，则需要     修改EIGRP汇总路由的AD值     →R3(config-router)#summary-metric 0.0.0.0/0 distance 212.2：使用以出接口方式的默认路由，再通告进EIGRP   R3(config)#ip route 0.0.0.0 0.0.0.0 s1/1   R3(config-router)#network 0.0.0.02.3：重分布静态   R3(config)#ip route 0.0.0.0 0.0.0.0 13.13.13.1   R3(config-router)#redistribute static </code></pre><h2 id="九、EIGRP的stub路由器"><a href="#九、EIGRP的stub路由器" class="headerlink" title="九、EIGRP的stub路由器"></a>九、EIGRP的stub路由器</h2><h4 id="1、SIA（stuck-in-active）："><a href="#1、SIA（stuck-in-active）：" class="headerlink" title="1、SIA（stuck in active）："></a>1、SIA（stuck in active）：</h4><p>卡在活跃状态，路由器没有可行的后继路由，发送查询包计算路由的过程为活跃状态，如果在3分钟没有收到reply包，则会断开邻居关系；思科在查询过程中添加了SIA的查询过程，在1.5分钟发送SIA查询，邻居回应SIA查询，判断链路正常，不会断开邻居关系。</p><h4 id="2、stub路由器：末节路由器"><a href="#2、stub路由器：末节路由器" class="headerlink" title="2、stub路由器：末节路由器"></a>2、stub路由器：末节路由器</h4><h6 id="2-1、作用："><a href="#2-1、作用：" class="headerlink" title="2.1、作用："></a>2.1、作用：</h6><p>查询包不会发送到stub路由器（抑制查询包），过滤路由</p><h6 id="2-2、配置"><a href="#2-2、配置" class="headerlink" title="2.2、配置:"></a>2.2、配置:</h6><pre class=" language-YAML"><code class="language-YAML">R4(config)#router eigrp 90R4(config-router)#eigrp stub R4(config-router)#eigrp stub ?  connected      Do advertise connected routes→只通告本地直连路由  leak-map       Allow dynamic prefixes based on the leak-map→路由泄漏  receive-only   Set receive only neighbor→只收不发，手写静态路由  redistributed  Do advertise redistributed routes→只通告重分布路由  static         Do advertise static routes→只通告静态路由（将静态重分布进EIGRP）  summary        Do advertise summary routes→只通告汇总</code></pre><h2 id="十、EIGRP的命名模式"><a href="#十、EIGRP的命名模式" class="headerlink" title="十、EIGRP的命名模式"></a>十、EIGRP的命名模式</h2><h4 id="1-命名模式又叫64bite的EIGRP"><a href="#1-命名模式又叫64bite的EIGRP" class="headerlink" title="1.命名模式又叫64bite的EIGRP"></a>1.命名模式又叫64bite的EIGRP</h4><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><pre class=" language-YAML"><code class="language-YAML">R2(config)#router eigrp ccnpR2(config-router)#address-family ipv4 autonomous-system 90R2(config-router-af)#network 12.12.12.0R2(config-router-af)#topology base→进程下R2(config-router-af-topology)#no auto-summary R2(config-router-af)#af-interface e0/0→接口下R2(config-router-af-interface)#authentication mode hmac-sha-256 cisco123R3(config)#router eigrp 90R3(config-router)#eigrp upgrade-cli ccnp→模式升级Configuration will be converted from router eigrp 90 to router eigrp ccnp.Are you sure you want to proceed? ? [yes/no]: yR3(config-router-af)#metric rib-scale 255→将命名模式EIGRP的度量值进行压缩</code></pre><h2 id="十一、EIGRP的被动接口"><a href="#十一、EIGRP的被动接口" class="headerlink" title="十一、EIGRP的被动接口"></a>十一、EIGRP的被动接口</h2><h4 id="1-作用：被动接口不会主动发送HELLO包，被动接口一般用在连接主机的接口上"><a href="#1-作用：被动接口不会主动发送HELLO包，被动接口一般用在连接主机的接口上" class="headerlink" title="1.作用：被动接口不会主动发送HELLO包，被动接口一般用在连接主机的接口上"></a>1.作用：被动接口不会主动发送HELLO包，被动接口一般用在连接主机的接口上</h4><h4 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2.配置"></a>2.配置</h4><pre class=" language-YAML"><code class="language-YAML">R1(config)#router eigrp 90R1(config-router)#passive-interface e0/0 </code></pre>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 路由协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSPF</title>
      <link href="/2023/01/07/ospf/"/>
      <url>/2023/01/07/ospf/</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF-开放最短路径优先"><a href="#OSPF-开放最短路径优先" class="headerlink" title="OSPF 开放最短路径优先"></a>OSPF 开放最短路径优先</h1><h2 id="一、OSPF的特点"><a href="#一、OSPF的特点" class="headerlink" title="一、OSPF的特点"></a>一、OSPF的特点</h2><p>1.任何厂商都会支持（运用广泛）→开放的协议<br>2.链路状态协议→知道全局网络拓扑</p><pre class=" language-YAML"><code class="language-YAML">        a.链路：路由器的接口        b.状态：接口上的IP地址、掩码、开销、带宽、邻居的信息</code></pre><p>3.工作在IP层协议号<strong>89</strong>的<strong>传输层协议</strong>，组播方式发送更新→224.0.0.5/224.0.0.6<br>4.基于SPF算法→在拓扑表通过SPF算法选出最优路径然后加表<br>5.区域性：合理规划网络结构<br>6.配置：进程下的配置以及接口配置<br>7.度量值计算：10^8/接口带宽（b）</p><pre class=" language-YAML"><code class="language-YAML">R1(config-router)#do show ip ospf int e0/1→查看开销R1(config-if)#ip ospf cost 20→直接修改OSPF的接口开销</code></pre><h2 id="二、OSPF的两个选举"><a href="#二、OSPF的两个选举" class="headerlink" title="二、OSPF的两个选举"></a>二、OSPF的两个选举</h2><h4 id="1-RID：表示OSPF的路由器"><a href="#1-RID：表示OSPF的路由器" class="headerlink" title="1.RID：表示OSPF的路由器"></a>1.RID：表示OSPF的路由器</h4><h6 id="1-1规则："><a href="#1-1规则：" class="headerlink" title="1.1规则："></a>1.1规则：</h6><p>手工指定和自动选举→选举具有非抢占性<br>非抢占性：RID不会因为后面先加入接口所影响，要变更RID要刷新OSPF的进程</p><pre class=" language-YAML"><code class="language-YAML">a.在路由进程下直接指定OSPF路由器的RIDR1(config-router)#router-id 2.2.2.2b.如果有环回口，取IP地址最大，无，则取物理接口IP地址最大</code></pre><h4 id="2-DR与BDR：指定路由器和备份指定路由器"><a href="#2-DR与BDR：指定路由器和备份指定路由器" class="headerlink" title="2.DR与BDR：指定路由器和备份指定路由器"></a>2.DR与BDR：指定路由器和备份指定路由器</h4><h6 id="2-1作用："><a href="#2-1作用：" class="headerlink" title="2.1作用："></a>2.1作用：</h6><p>DRother与DR和BDR建立邻接关系，DRothers数据发送DR和BDR，由DR负责转发，当DR失效，启用BDR</p><h6 id="2-2选举规则："><a href="#2-2选举规则：" class="headerlink" title="2.2选举规则："></a>2.2选举规则：</h6><p>优先级和RID→具有非抢占性（刷新选举区域的OSPF进程）</p><pre class=" language-YAML"><code class="language-YAML">a.默认以太网环境接口优先级为1，串行链路接口默认优先级为0，优先级0代表没有资格参与选举，  串行链路不要选举DR和BDRb.优先级相同的情况下，比较RID，大的为DR</code></pre><p>######2.3 DR和BDR的概念是路由器的接口不是路由器</p><h2 id="三、OSPF的三张表"><a href="#三、OSPF的三张表" class="headerlink" title="三、OSPF的三张表"></a>三、OSPF的三张表</h2><h4 id="1-邻居表-：存放邻居信息"><a href="#1-邻居表-：存放邻居信息" class="headerlink" title="1. 邻居表 ：存放邻居信息"></a>1. 邻居表 ：存放邻居信息</h4><h4 id="2-拓扑表-：存放DBD的link-id，是区域内同步"><a href="#2-拓扑表-：存放DBD的link-id，是区域内同步" class="headerlink" title="2. 拓扑表 ：存放DBD的link-id，是区域内同步"></a>2. 拓扑表 ：存放DBD的link-id，是区域内同步</h4><h4 id="3-路由表-：存放最优路由"><a href="#3-路由表-：存放最优路由" class="headerlink" title="3. 路由表 ：存放最优路由"></a>3. 路由表 ：存放最优路由</h4><pre class=" language-YAML"><code class="language-YAML">3.1 区域间的路由信息    O IA  192.168.234.0/24 [110/20] via 192.168.12.2, 00:31:29, Ethernet0/1    O IA：代表的是其他OSPF区域的路由信息3.2 区域外路由信息    O E2     6.6.6.0 [110/20] via 192.168.234.2, 00:19:48, Ethernet0/0    O E1     6.6.6.0 [110/40] via 192.168.234.2, 00:00:03, Ethernet0/0    OE1/2：代表的是非OSPF的路由信息3.3 OE1/2区别    在开销上，OE2默认非OSPF的路由开销都是20，OE1的开销是20+到达ASBR的开销；3.4 不同OSPF路由类型的选路优先级    a、Ｏ    b、Ｏ IA    c、O E1    d、O E2    从上到下优先级越低</code></pre><h2 id="四、OSPF的五个报文"><a href="#四、OSPF的五个报文" class="headerlink" title="四、OSPF的五个报文"></a>四、OSPF的五个报文</h2><h4 id="1-hello"><a href="#1-hello" class="headerlink" title="1.hello:"></a>1.hello:</h4><p>发现、建立、维持邻居关系，周期为10S（40S）<br>a.参数的匹配：区域号，hello-time以及dead-time、身份验证、网络类型等等</p><h4 id="2-DBD"><a href="#2-DBD" class="headerlink" title="2.DBD:"></a>2.DBD:</h4><p>数据库摘要<br>a.i位：初始位代表一个DBD报文，置为1<br>b.M位：还不是最后一个DBD报文，置为1<br>c.MS位：“主”路由器置为1，刚开始该为都为1，RID大的为“主”<br>d.DBD序列号</p><h4 id="3-LSR："><a href="#3-LSR：" class="headerlink" title="3.LSR："></a>3.LSR：</h4><p>请求相应的链路信息</p><h4 id="4-LSU："><a href="#4-LSU：" class="headerlink" title="4.LSU："></a>4.LSU：</h4><p>对请求进行详细的回应</p><h4 id="5-LSACK："><a href="#5-LSACK：" class="headerlink" title="5.LSACK："></a>5.LSACK：</h4><p>对回应的确认，显示确认（以LSACK确认）和隐式确认（发送一份拷贝的LSU）<br>LSA的老化时间，最大时间是1h，30分钟发送一次完整的更新<br>注意：LSA不是OSPF的具体的报文，只是一个统称</p><h2 id="五、OSPF的七个状态机"><a href="#五、OSPF的七个状态机" class="headerlink" title="五、OSPF的七个状态机"></a>五、OSPF的七个状态机</h2><h4 id="1-down："><a href="#1-down：" class="headerlink" title="1.down："></a>1.down：</h4><p>没有发现OSPF的hello包</p><h4 id="2-init："><a href="#2-init：" class="headerlink" title="2.init："></a>2.init：</h4><p>收到OSPF的hello包</p><h4 id="3-2-way："><a href="#3-2-way：" class="headerlink" title="3. 2-way："></a>3. 2-way：</h4><p>在邻居发送的hello包中，发现自己RID则进入此状态（邻接状态），进行DR和BDR选举<br>        DRother→BDR→DR</p><h4 id="4-exstart："><a href="#4-exstart：" class="headerlink" title="4.exstart："></a>4.exstart：</h4><p>“主从”关系选举</p><h4 id="5-exchange："><a href="#5-exchange：" class="headerlink" title="5.exchange："></a>5.exchange：</h4><p>交互DBD</p><h4 id="6-loading："><a href="#6-loading：" class="headerlink" title="6.loading："></a>6.loading：</h4><p>进行LSR和LSU报文交互以及SPF算法</p><h4 id="7-full："><a href="#7-full：" class="headerlink" title="7.full："></a>7.full：</h4><p>完全邻接状态</p><h2 id="六、OSPF的LSA类型"><a href="#六、OSPF的LSA类型" class="headerlink" title="六、OSPF的LSA类型"></a>六、OSPF的LSA类型</h2><h4 id="1-1类LSA："><a href="#1-1类LSA：" class="headerlink" title="1.1类LSA："></a>1.1类LSA：</h4><p>路由器LSA，通告本台设备接口的相关信息，每台设备都会通告1类LSA，泛洪只能在本区域内，不能跨区域</p><p>查看：R1#show ip ospf database router </p><h4 id="2-2类LSA："><a href="#2-2类LSA：" class="headerlink" title="2.2类LSA："></a>2.2类LSA：</h4><p>网络LSA，始发者是DR，通告所连接的网段以及设备，泛洪只能在本区域内，不能跨区域</p><p>查看：R1#show ip ospf database network<br>        注意：2类LSA不一定存在，点对点环境就不存在2类LSA</p><h4 id="3-3类LSA："><a href="#3-3类LSA：" class="headerlink" title="3.3类LSA："></a>3.3类LSA：</h4><p> 网络汇总LSA，始发者是ABR（区域边界路由器），通告的是其他OSPF区域的路由信息，<br>             ABR是将其他区域的路由通过网段以及开销的形式告诉给其他区域（距离矢量路由协议的特征）</p><p>查看：R1#show ip ospf database summary </p><h4 id="4-4类LSA："><a href="#4-4类LSA：" class="headerlink" title="4.4类LSA："></a>4.4类LSA：</h4><p>ASBR汇总LSA，始发者是ABR，通告的是ASBR的位置，泛洪区域为OSPF区域</p><p>查看：R4#show ip ospf database asbr-summary</p><h4 id="5-5类LSA："><a href="#5-5类LSA：" class="headerlink" title="5.5类LSA："></a>5.5类LSA：</h4><p>外部LSA，始发者是ASBR，通告的是非OSPF区域的路由信息，泛洪区域为OSPF区域</p><p>查看：R4#show ip ospf database external </p><h2 id="七、OSPF的网络类型："><a href="#七、OSPF的网络类型：" class="headerlink" title="七、OSPF的网络类型："></a>七、OSPF的网络类型：</h2><h4 id="1-广播多路访问（BROADCAST）"><a href="#1-广播多路访问（BROADCAST）" class="headerlink" title="1.广播多路访问（BROADCAST）"></a>1.广播多路访问（BROADCAST）</h4><p>需要选举DR和BDR</p><h4 id="2-点对点"><a href="#2-点对点" class="headerlink" title="2.点对点"></a>2.点对点</h4><p>串行链路不需要选举DR和BDR<br>        注意：网络类型不一致，可能导致邻居正常但是路由表不正常</p><h4 id="3-非广播多路访问："><a href="#3-非广播多路访问：" class="headerlink" title="3.非广播多路访问："></a>3.非广播多路访问：</h4><p>此网络类型不具备广播功能，需要手工指定邻居，邻居需要单播进行，还是需要选举DR和BDR，<br>    时间上，hello变为30S，deadtime变为120S<br>        ATTEMPT：尝试状态，尝试建立邻居</p><pre class=" language-YAML"><code class="language-YAML">R1(config)#router ospf 110R1(config-router)#neighbor 192.168.12.2→手工指定邻居</code></pre><h4 id="4-点对多点："><a href="#4-点对多点：" class="headerlink" title="4.点对多点："></a>4.点对多点：</h4><p>就是点对点链路的集合，不需要选举DR和BDR<br>    （1）更改OSPF的网络类型→接口下</p><pre class=" language-YAML"><code class="language-YAML">R2(config)#int e0/0R2(config-if)#ip ospf network ?    broadcast                non-broadcast            point-to-multipoint      point-to-point  </code></pre><p>注意：OSPF的环回口在通告的时候掩码是/32<br>    需求：要使OSPF的邻居实现快速收敛，要做什么？<br>    就是将网络类型改为点对点→不需要选举DR和BDR</p><h2 id="八、OSPF的区域以及区域不连续"><a href="#八、OSPF的区域以及区域不连续" class="headerlink" title="八、OSPF的区域以及区域不连续"></a>八、OSPF的区域以及区域不连续</h2><h4 id="1-区域"><a href="#1-区域" class="headerlink" title="1.区域"></a>1.区域</h4><p>OSPF网络环境存在多个区域，分为骨干区域（AREA 0）以及非骨干区域（非AREA 0）区域的表示<br>    可以采用点分十进制也可以直接标号</p><h4 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h4><p>LSDB是区域内同步，通过每个区域维护自己的LSDB，精简LSDB的大小，节约设备的资源，降低了LSA的泛洪范围</p><h4 id="3-区域的要求"><a href="#3-区域的要求" class="headerlink" title="3.区域的要求"></a>3.区域的要求</h4><p>a.骨干区域要求连续<br>        b.非骨干区域与骨干区域相连→域间路由是通过３类LSA产生</p><h4 id="4-角色"><a href="#4-角色" class="headerlink" title="4.角色"></a>4.角色</h4><p>ABR：连接骨干区域和非骨干区域的OSPF路由器（至少要有一个接口通告进AREA0）<br>        ASBR：连接OSPF区域以及非OSPF区域的OSPF路由器 </p><h4 id="5-解决区域不连续的问题"><a href="#5-解决区域不连续的问题" class="headerlink" title="5.解决区域不连续的问题"></a>5.解决区域不连续的问题</h4><h6 id="5-1虚链路→网络类型与P2P相似，不需要选举DR和BDR"><a href="#5-1虚链路→网络类型与P2P相似，不需要选举DR和BDR" class="headerlink" title="5.1虚链路→网络类型与P2P相似，不需要选举DR和BDR"></a>5.1虚链路→网络类型与P2P相似，不需要选举DR和BDR</h6><pre class=" language-YAML"><code class="language-YAML">R3(config)#router ospf 110R3(config-router)#area 1 virtual-link 2.2.2.2→区域代表的是你要透传的区域，IP地址是邻居的RIDR3(config-router)#area 1 virtual-link 4.4.4.4</code></pre><h6 id="5-2隧道（GRE）→隧道的头尾IP进行连接，不关心设备的数量，只关心连通性，网络类型为P2P"><a href="#5-2隧道（GRE）→隧道的头尾IP进行连接，不关心设备的数量，只关心连通性，网络类型为P2P" class="headerlink" title="5.2隧道（GRE）→隧道的头尾IP进行连接，不关心设备的数量，只关心连通性，网络类型为P2P"></a>5.2隧道（GRE）→隧道的头尾IP进行连接，不关心设备的数量，只关心连通性，网络类型为P2P</h6><pre class=" language-YAML"><code class="language-YAML">R5(config)#interface tunnel 1   //创建隧道1R5(config-if)#ip add 192.168.25.5 255.255.255.0//分配IP地址R5(config-if)#no sh     R5(config-if)#tunnel source 192.168.45.5//隧道的源IPR5(config-if)#tunnel destination 192.168.23.2//隧道的目的IPR5(config-if)#ip ospf 110 a 0 //虽然不是在骨干区域做隧道，但是隧道窑通告进骨干区域</code></pre><h2 id="九、OSPF的路由汇总"><a href="#九、OSPF的路由汇总" class="headerlink" title="九、OSPF的路由汇总"></a>九、OSPF的路由汇总</h2><h4 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h4><p>精简路由表的条目，OSPF的路由汇总针对3类LSA以及5类LSA，降低LSA的条目</p><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><h6 id="2-1区域间汇总"><a href="#2-1区域间汇总" class="headerlink" title="2.1区域间汇总"></a>2.1区域间汇总</h6><p>汇总是在产生3类LSA的ABR上做并且也会产生null0路由，并不是在源头设备上配置，area 0表示的是对区域0的路由汇总</p><pre class=" language-YAML"><code class="language-YAML">R2(config-router)#area 0 range 172.16.0.0 255.255.0.0</code></pre><h6 id="2-2区域外的汇总"><a href="#2-2区域外的汇总" class="headerlink" title="2.2区域外的汇总"></a>2.2区域外的汇总</h6><p>汇总的是5类LSA，配置在ASBR上，同样也会产生null0路由</p><pre class=" language-YAML"><code class="language-YAML">R1(config-router)#summary-address 192.168.0.0 255.255.0.0</code></pre><h2 id="十、OSPF的默认路由下发"><a href="#十、OSPF的默认路由下发" class="headerlink" title="十、OSPF的默认路由下发"></a>十、OSPF的默认路由下发</h2><h4 id="1-作用：在边界网关上主动下发一条默认路由进OSPF的区域"><a href="#1-作用：在边界网关上主动下发一条默认路由进OSPF的区域" class="headerlink" title="1.作用：在边界网关上主动下发一条默认路由进OSPF的区域"></a>1.作用：在边界网关上主动下发一条默认路由进OSPF的区域</h4><h4 id="2-1进程下"><a href="#2-1进程下" class="headerlink" title="2.1进程下"></a>2.1进程下</h4><pre class=" language-YAML"><code class="language-YAML">a.R1(config-router)#default-information originate     可选参数        metric-type 1→将默认路由类型更改为O*E1        metric→更改默认路由的开销        O*E2  0.0.0.0/0 [110/1] via 192.168.234.2, 00:00:07, Ethernet0/0        其他设备收到的路由类型为O*E2    注意：要求本地要有默认路由，如果没有默认路由下发不生效b.R1(config-router)#default-information originate always 不管本地是否有默认路由，都强制下发</code></pre><h4 id="2-2重分布→将静态路由重分布进OSPF"><a href="#2-2重分布→将静态路由重分布进OSPF" class="headerlink" title="2.2重分布→将静态路由重分布进OSPF"></a>2.2重分布→将静态路由重分布进OSPF</h4><pre><code>    R1(config-router)#redistribute static subnets</code></pre><h2 id="十一、OSPF的特殊区域"><a href="#十一、OSPF的特殊区域" class="headerlink" title="十一、OSPF的特殊区域"></a>十一、OSPF的特殊区域</h2><h4 id="1-区域的类型"><a href="#1-区域的类型" class="headerlink" title="1.区域的类型"></a>1.区域的类型</h4><pre class=" language-YAML"><code class="language-YAML">（1）末梢区域（stub）：删除4类、5类LSA，由ABR下发一条默认路由，stub的属性是两台OSPF邻居建立的参数之一    配置：整个AREA 2区域都需要配置stub        R5(config)#router ospf 110        R5(config-router)#area 2 stub    现象：        路由表上：O*IA  0.0.0.0/0 [110/11] via 192.168.35.3, 00:00:05, Ethernet0/0→由ABR产生一条3类的默认路由取代4、5类LSA        整个区域的拓扑表上没有4、5类的LSA，在3类LSA多了一条全0路由    注意：        ①该区域没有ASBR        ②该区域不能使骨干区域        ③该区域不能存在虚链路（2）完全末梢区域（totally-stub），删除3类、4类、5类LSA，由ABR下发一条默认路由    配置：只需要在ABR上配置即可        R3(config-router)#area 2 stub no-summary （3）非完全末梢区域（NSSA）：该区域可以存在ASBR，删除4类、5类LSA，但是NSSA区域的ASBR会将5类LSA转换成7类LSA（实质上还是OSPF外部区域信息），7类会在ABR上重新转换回5类LSA，通告进OSPF的其他区域    配置：        整个AREA 1区域都需要配置NSSA（跟邻居建立有关）            R1(config-router)#area 1 nssa    现象：        ①路由表上：O N2     172.16.2.0 [110/20] via 192.168.12.1, 00:00:11, Ethernet0/0→如果是7类LSA，则外部路由在路由表中以O N2（实质上就是O E2）表示，同样也可以改为O N1（O E1）类型，O N1和O N2的差别与O E2和O E1一样，修改类型在重分布上做        ②拓扑上出现→Type-7 AS External Link States（4）完全非完全末梢区域（totally-NSSA）该区域可以存在ASBR，删除3类，4类、5类LSA    配置：        R2(config-router)#area 1 nssa no-summary        R2(config-router)#area 1 default-cost 10→将默认路由的开销修改为10（默认的开销是1）    现象：在拓扑上，3类LSA以一条全0的路由表示</code></pre><h4 id="2、作用：简化LSDB的条目，降低设备的内存消耗"><a href="#2、作用：简化LSDB的条目，降低设备的内存消耗" class="headerlink" title="2、作用：简化LSDB的条目，降低设备的内存消耗"></a>2、作用：简化LSDB的条目，降低设备的内存消耗</h4><h2 id="十二、OSPF的身份验证"><a href="#十二、OSPF的身份验证" class="headerlink" title="十二、OSPF的身份验证"></a>十二、OSPF的身份验证</h2><h4 id="1-防止恶意更新源的恶意通告"><a href="#1-防止恶意更新源的恶意通告" class="headerlink" title="1.防止恶意更新源的恶意通告"></a>1.防止恶意更新源的恶意通告</h4><h4 id="2-加密方式"><a href="#2-加密方式" class="headerlink" title="2.加密方式"></a>2.加密方式</h4><pre class=" language-YAML"><code class="language-YAML">①明文    a.接口下配置        R5(config-if)#ip ospf authentication       //启用认证        R5(config-if)#ip ospf authentication-key cisco //设置密码    b.进程下配置        R5(config-router)#area 2 authentication  //区域2启用认证        R5(config-if)#ip ospf authentication-key cisco //设置密码②密文（MD5）    a.接口下配置        R1(config-if)#ip ospf authentication message-digest         R1(config-if)#ip ospf message-digest-key 1 md5 cisco    b.进程下配置        R1(config-router)#area 1 authentication message-digest        R1(config-if)#ip ospf message-digest-key 1 md5 cisco虚链路的身份验证    R5(config-router)#area 1 authentication    R1(config-router)#area 1 virtual-link 3.3.3.3 authentication-key cisco</code></pre><h2 id="十三、OSPF的被动接口"><a href="#十三、OSPF的被动接口" class="headerlink" title="十三、OSPF的被动接口"></a>十三、OSPF的被动接口</h2><h4 id="1-作用：被动接口一般使用在连接主机或者loopback口上（没有OSPF的邻居），不发送HELLO报文"><a href="#1-作用：被动接口一般使用在连接主机或者loopback口上（没有OSPF的邻居），不发送HELLO报文" class="headerlink" title="1.作用：被动接口一般使用在连接主机或者loopback口上（没有OSPF的邻居），不发送HELLO报文"></a>1.作用：被动接口一般使用在连接主机或者loopback口上（没有OSPF的邻居），不发送HELLO报文</h4><h4 id="2-配置："><a href="#2-配置：" class="headerlink" title="2.配置："></a>2.配置：</h4><pre class=" language-YAML"><code class="language-YAML">    R1(config-router)#passive-interface e0/1    R1(config-router)#passive-interface default→将所有接口变为被动接口    R1(config-router)#no passive-interface e0/1→将e0/1变成主动接口</code></pre>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程 </tag>
            
            <tag> 路由协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/07/hello-world/"/>
      <url>/2023/01/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
